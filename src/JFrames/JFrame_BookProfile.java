/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package JFrames;

import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;
import Connection.DatabaseConnection;
import static JFrames.Objects.con;
import static JFrames.Objects.cst;
import static JFrames.Objects.pst;
import static JFrames.Objects.rs;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.Timer;

/**
 *
 * @author Joshua C. Magoliman
 */
public class JFrame_BookProfile extends javax.swing.JFrame {

    /**
     * Creates new form JFrame_BookProfile
     */
    private String subjectValue, shelfValue, dateToday, timeToday;
    private int subjectId, shelfId;

    public JFrame_BookProfile() {
        initComponents();
        DatabaseConnection dbc = DatabaseConnection.getDatabaseConnection();
        con = dbc.getConnection();
        setIcon();
        reset();
        setDateAndTime();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnDeleteOrCancel = new javax.swing.JButton();
        btnEditOrUpdate = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        lblRFID = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtareaPublisher = new javax.swing.JTextArea();
        lblTitle = new javax.swing.JLabel();
        lblSubject = new javax.swing.JLabel();
        txtRFID = new javax.swing.JTextField();
        lblAuthors = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtareaAuthors = new javax.swing.JTextArea();
        lblPublisher = new javax.swing.JLabel();
        lblCopyrightYear = new javax.swing.JLabel();
        txtCopyrightYear = new javax.swing.JTextField();
        lblOriginalTotalPages = new javax.swing.JLabel();
        txtOriginalTotalPages = new javax.swing.JTextField();
        lblCurrentTotalPages = new javax.swing.JLabel();
        txtCurrentTotalPages = new javax.swing.JTextField();
        lblQuantity = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JTextField();
        lblShelf = new javax.swing.JLabel();
        txtTitle = new javax.swing.JTextField();
        cmbShelf = new javax.swing.JComboBox<>();
        cmbSubject = new javax.swing.JComboBox<>();
        lblBookTitle = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setFocusable(false);
        setUndecorated(true);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(0, 153, 0));
        jPanel1.setForeground(java.awt.Color.white);
        jPanel1.setMaximumSize(null);
        jPanel1.setPreferredSize(new java.awt.Dimension(1294, 447));
        jPanel1.setRequestFocusEnabled(false);

        btnDeleteOrCancel.setBackground(java.awt.Color.black);
        btnDeleteOrCancel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnDeleteOrCancel.setForeground(java.awt.Color.white);
        btnDeleteOrCancel.setText("DELETE");
        btnDeleteOrCancel.setBorder(null);
        btnDeleteOrCancel.setBorderPainted(false);
        btnDeleteOrCancel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDeleteOrCancel.setFocusPainted(false);
        btnDeleteOrCancel.setFocusable(false);
        btnDeleteOrCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteOrCancelActionPerformed(evt);
            }
        });

        btnEditOrUpdate.setBackground(java.awt.Color.black);
        btnEditOrUpdate.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnEditOrUpdate.setForeground(java.awt.Color.white);
        btnEditOrUpdate.setText("EDIT");
        btnEditOrUpdate.setBorder(null);
        btnEditOrUpdate.setBorderPainted(false);
        btnEditOrUpdate.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEditOrUpdate.setFocusPainted(false);
        btnEditOrUpdate.setFocusable(false);
        btnEditOrUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditOrUpdateActionPerformed(evt);
            }
        });

        btnClose.setBackground(java.awt.Color.black);
        btnClose.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnClose.setForeground(java.awt.Color.white);
        btnClose.setText("CLOSE");
        btnClose.setBorder(null);
        btnClose.setBorderPainted(false);
        btnClose.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnClose.setFocusPainted(false);
        btnClose.setFocusable(false);
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        lblRFID.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        lblRFID.setForeground(java.awt.Color.white);
        lblRFID.setText("RFID");

        txtareaPublisher.setColumns(20);
        txtareaPublisher.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtareaPublisher.setRows(5);
        txtareaPublisher.setAutoscrolls(false);
        txtareaPublisher.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtareaPublisherKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(txtareaPublisher);

        lblTitle.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        lblTitle.setForeground(java.awt.Color.white);
        lblTitle.setText("Title");

        lblSubject.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        lblSubject.setForeground(java.awt.Color.white);
        lblSubject.setText("Subject");

        txtRFID.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtRFID.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        txtRFID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtRFIDKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtRFIDKeyTyped(evt);
            }
        });

        lblAuthors.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        lblAuthors.setForeground(java.awt.Color.white);
        lblAuthors.setText("Authors");

        txtareaAuthors.setColumns(20);
        txtareaAuthors.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtareaAuthors.setRows(5);
        txtareaAuthors.setAutoscrolls(false);
        txtareaAuthors.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtareaAuthorsKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(txtareaAuthors);

        lblPublisher.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        lblPublisher.setForeground(java.awt.Color.white);
        lblPublisher.setText("Publisher");

        lblCopyrightYear.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        lblCopyrightYear.setForeground(java.awt.Color.white);
        lblCopyrightYear.setText("Copyright Year");

        txtCopyrightYear.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtCopyrightYear.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCopyrightYearKeyTyped(evt);
            }
        });

        lblOriginalTotalPages.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        lblOriginalTotalPages.setForeground(java.awt.Color.white);
        lblOriginalTotalPages.setText("Original Total Pages");

        txtOriginalTotalPages.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtOriginalTotalPages.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtOriginalTotalPagesKeyTyped(evt);
            }
        });

        lblCurrentTotalPages.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        lblCurrentTotalPages.setForeground(java.awt.Color.white);
        lblCurrentTotalPages.setText("Current Total Pages");

        txtCurrentTotalPages.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtCurrentTotalPages.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCurrentTotalPagesKeyTyped(evt);
            }
        });

        lblQuantity.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        lblQuantity.setForeground(java.awt.Color.white);
        lblQuantity.setText("Quantity");

        txtQuantity.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtQuantityKeyTyped(evt);
            }
        });

        lblShelf.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        lblShelf.setForeground(java.awt.Color.white);
        lblShelf.setText("Shelf");

        txtTitle.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtTitle.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtTitleKeyTyped(evt);
            }
        });

        cmbShelf.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cmbShelf.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        cmbShelf.setFocusable(false);
        cmbShelf.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbShelfItemStateChanged(evt);
            }
        });

        cmbSubject.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cmbSubject.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        cmbSubject.setFocusable(false);
        cmbSubject.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbSubjectItemStateChanged(evt);
            }
        });

        lblBookTitle.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        lblBookTitle.setForeground(java.awt.Color.white);
        lblBookTitle.setText("BOOK PROFILE");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(369, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(btnEditOrUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(btnDeleteOrCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(351, 351, 351))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(lblBookTitle)
                        .addGap(227, 227, 227)
                        .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(164, 164, 164)
                .addComponent(lblSubject)
                .addGap(18, 18, 18)
                .addComponent(cmbSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(82, 82, 82)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(lblQuantity)
                                .addComponent(lblCurrentTotalPages)
                                .addComponent(lblShelf))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtCurrentTotalPages)
                                .addComponent(txtQuantity)
                                .addComponent(cmbShelf, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(2, 2, 2)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(lblPublisher)
                                .addComponent(lblOriginalTotalPages)
                                .addComponent(lblCopyrightYear)
                                .addComponent(lblAuthors)
                                .addComponent(lblTitle)
                                .addComponent(lblRFID))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane1)
                                .addComponent(txtCopyrightYear)
                                .addComponent(jScrollPane2)
                                .addComponent(txtTitle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 772, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtOriginalTotalPages, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtRFID, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addContainerGap(82, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblBookTitle)
                    .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(99, 99, 99)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSubject))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 439, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditOrUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeleteOrCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(95, 95, 95)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblRFID)
                        .addComponent(txtRFID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblTitle))
                    .addGap(55, 55, 55)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblAuthors)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblPublisher))
                    .addGap(18, 18, 18)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtCopyrightYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblCopyrightYear))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtOriginalTotalPages, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblOriginalTotalPages))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtCurrentTotalPages, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblCurrentTotalPages))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblQuantity))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmbShelf, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblShelf))
                    .addContainerGap(85, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1084, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 697, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
   private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("ICON.png")));
    }

    public void retrieveSubjects() {
        try {
            pst = con.prepareStatement("SELECT * FROM tbl_subjects WHERE id = ?");
            pst.setInt(1, JFrame_BookList.subjectIdNumber);
            rs = pst.executeQuery();
            if (rs.next()) {
                subjectValue = rs.getString("subject");
            }
            pst = con.prepareStatement("SELECT MAX(id) FROM tbl_subjects");
            rs = pst.executeQuery();
            if (rs.next()) {
                int maximumSubjectNumber = rs.getInt(1);
                cmbSubject.insertItemAt("None", 0);
                for (int startNumber = 1; startNumber <= maximumSubjectNumber; startNumber = startNumber + 1) {
                    pst = con.prepareStatement("SELECT * FROM tbl_subjects WHERE id = ?");
                    pst.setInt(1, startNumber);
                    rs = pst.executeQuery();
                    if (rs.next()) {
                        String subject = "";
                        subject = rs.getString("subject");
                        cmbSubject.addItem(subject);
                    }
                }
                cmbSubject.setSelectedItem(subjectValue);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex);
            ex.printStackTrace();
        }
    }

    public void retrieveShelfs() {
        try {
            pst = con.prepareStatement("SELECT * FROM tbl_shelfs WHERE id = ?");
            pst.setInt(1, JFrame_BookList.shelfIdNumber);
            rs = pst.executeQuery();
            if (rs.next()) {
                shelfValue = rs.getString("shelf");
            }
            pst = con.prepareStatement("SELECT MAX(id) FROM tbl_shelfs");
            rs = pst.executeQuery();
            if (rs.next()) {
                int maximumShelfNumber = rs.getInt(1);
                cmbShelf.insertItemAt("None", 0);
                for (int startNumber = 1; startNumber <= maximumShelfNumber; startNumber = startNumber + 1) {
                    pst = con.prepareStatement("SELECT * FROM tbl_shelfs WHERE id = ?");
                    pst.setInt(1, startNumber);
                    rs = pst.executeQuery();
                    if (rs.next()) {
                        String shelf = "";
                        shelf = rs.getString("shelf");
                        cmbShelf.addItem(shelf);
                    }
                }
                cmbShelf.setSelectedItem(shelfValue);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex);
            ex.printStackTrace();
        }
    }

    private void setDateAndTime() {
        Date d = new Date();
        SimpleDateFormat s = new SimpleDateFormat("yyyy-MM-dd");
        dateToday = s.format(d);
        new Timer(0, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Date date = new Date();
                SimpleDateFormat simpleDateFormat = new SimpleDateFormat("hh:mm:ss a");
                timeToday = simpleDateFormat.format(date);
            }
        }).start();
    }

    private void enabled() {
        lblTitle.requestFocus();
        txtTitle.setFocusable(true);
        txtTitle.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        cmbSubject.setEnabled(true);
        cmbSubject.setFocusable(true);
        cmbSubject.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtareaAuthors.setFocusable(true);
        txtareaAuthors.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtareaPublisher.setFocusable(true);
        txtareaPublisher.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtCopyrightYear.setFocusable(true);
        txtCopyrightYear.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtOriginalTotalPages.setFocusable(true);
        txtOriginalTotalPages.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtCurrentTotalPages.setFocusable(true);
        txtCurrentTotalPages.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtQuantity.setFocusable(true);
        txtQuantity.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        cmbShelf.setEnabled(true);
        cmbShelf.setFocusable(true);
        cmbShelf.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
    }
    private void btnDeleteOrCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteOrCancelActionPerformed
        if (btnDeleteOrCancel.getText().equals("DELETE")) {
            int P = JOptionPane.showConfirmDialog(null, " Are you sure want to delete?", "ATTENTION", JOptionPane.YES_NO_OPTION);
            if (P == JOptionPane.YES_OPTION) //(P==0) //YES FOR 0 NO FOR 1
            {
                deleting();
            }
        } else if (btnDeleteOrCancel.getText().equals("CANCEL")) {
            int P = JOptionPane.showConfirmDialog(null, " Are you sure want to cancel?", "ATTENTION", JOptionPane.YES_NO_OPTION);
            if (P == JOptionPane.YES_OPTION) //(P==0) //YES FOR 0 NO FOR 1
            {
                cancelling();
            }
        }
    }//GEN-LAST:event_btnDeleteOrCancelActionPerformed
    private void deleting() {
        try {
            cst = con.prepareCall("{call sp_DeleteExistingBook(?)}");
            cst.setString(1, txtRFID.getText());
            if (cst.executeUpdate() == 1) {
                JOptionPane.showMessageDialog(this, "Successfully Deleted!", "ATTENTION", JOptionPane.INFORMATION_MESSAGE);
                this.dispose();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex);
            ex.printStackTrace();
        }
    }

    private void cancelling() {
        reset();
        retrieveCurrentInfo();
    }

    private void btnEditOrUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditOrUpdateActionPerformed
        switch (btnEditOrUpdate.getText()) {
            case "EDIT":
                btnEditOrUpdate.setText("UPDATE");
                btnDeleteOrCancel.setText("CANCEL");
                btnClose.setEnabled(false);
                enabled();
                break;
            case "UPDATE":
                int P = JOptionPane.showConfirmDialog(null, " Are you sure want to update ?", "ATTENTION", JOptionPane.YES_NO_OPTION);
                if (P == JOptionPane.YES_OPTION) //(P==0) //YES FOR 0 NO FOR 1
                {
                    validation();
                }
                break;
        }
    }//GEN-LAST:event_btnEditOrUpdateActionPerformed
    private void validation() {
        if (txtRFID.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "No RFId Found!", "ATTENTION", JOptionPane.ERROR_MESSAGE);
            txtRFID.requestFocus();
        } else if (txtTitle.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "No Title Found!", "ATTENTION", JOptionPane.ERROR_MESSAGE);
            txtTitle.requestFocus();
        } else if (cmbSubject.getSelectedItem().equals("None")) {
            JOptionPane.showMessageDialog(this, "No Subject Found!", "ATTENTION", JOptionPane.ERROR_MESSAGE);
            cmbSubject.requestFocus();
        } else if (txtareaAuthors.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "No Authors Found!", "ATTENTION", JOptionPane.ERROR_MESSAGE);
            txtareaAuthors.requestFocus();
        } else if (txtareaPublisher.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "No Publisher Found!", "ATTENTION", JOptionPane.ERROR_MESSAGE);
            txtareaPublisher.requestFocus();
        } else if (txtCopyrightYear.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "No Copyright Year Found!", "ATTENTION", JOptionPane.ERROR_MESSAGE);
            txtCopyrightYear.requestFocus();
        } else if (txtOriginalTotalPages.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "No Original Total Pages Found!", "ATTENTION", JOptionPane.ERROR_MESSAGE);
            txtOriginalTotalPages.requestFocus();
        } else if (txtCurrentTotalPages.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "No Current Total Pages Found!", "ATTENTION", JOptionPane.ERROR_MESSAGE);
            txtCurrentTotalPages.requestFocus();
        } else if (txtQuantity.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "No Quantity Found!", "ATTENTION", JOptionPane.ERROR_MESSAGE);
            txtQuantity.requestFocus();
        } else if (cmbShelf.getSelectedItem().equals("None")) {
            JOptionPane.showMessageDialog(this, "No Shelf Found!", "ATTENTION", JOptionPane.ERROR_MESSAGE);
            cmbShelf.requestFocus();
        } else {
            updating();
        }
    }

    private void updating() {
        try {
            cst = con.prepareCall("{call sp_UpdateExistingBook(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)}");
            cst.setString("param_title", txtTitle.getText());
            cst.setInt("param_subject_id", subjectId);
            cst.setString("param_authors", txtareaAuthors.getText());
            cst.setString("param_publisher", txtareaPublisher.getText());
            cst.setString("param_copyright_year", txtCopyrightYear.getText());
            cst.setInt("param_original_totalpages", Integer.parseInt(txtOriginalTotalPages.getText()));
            cst.setInt("param_current_totalpages", Integer.parseInt(txtCurrentTotalPages.getText()));
            cst.setInt("param_quantity", Integer.parseInt(txtQuantity.getText()));
            cst.setString("param_date", dateToday);
            cst.setString("param_time", timeToday);
            cst.setInt("param_shelf_id", shelfId);
            cst.setInt("param_user_id", JFrame_Main.accountId);
            cst.setString("param_rfid", txtRFID.getText());
            if (cst.executeUpdate() == 1) {
                JOptionPane.showMessageDialog(this, "Successfully Updated!");
                reset();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex);
            ex.printStackTrace();
        }
    }

    private void reset() {
        try {
            lblRFID.requestFocus();
            txtRFID.setFocusable(false);
            txtRFID.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
            txtTitle.setFocusable(false);
            txtTitle.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
            cmbSubject.setFocusable(false);
            cmbSubject.setEnabled(false);
            cmbSubject.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
            txtareaAuthors.setFocusable(false);
            txtareaAuthors.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
            txtareaPublisher.setFocusable(false);
            txtareaPublisher.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
            txtCopyrightYear.setFocusable(false);
            txtCopyrightYear.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
            txtOriginalTotalPages.setFocusable(false);
            txtOriginalTotalPages.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
            txtCurrentTotalPages.setFocusable(false);
            txtCurrentTotalPages.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
            txtQuantity.setFocusable(false);
            txtQuantity.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
            cmbShelf.setFocusable(false);
            cmbShelf.setEnabled(false);
            cmbShelf.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
            btnClose.setEnabled(true);
            btnEditOrUpdate.setText("EDIT");
            btnDeleteOrCancel.setText("DELETE");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex);
            ex.printStackTrace();
        }
    }

    private void retrieveCurrentInfo() {
        try {
            pst = con.prepareStatement("SELECT * FROM tbl_books WHERE rfid = ?");
            pst.setString(1, txtRFID.getText());
            rs = pst.executeQuery();
            if (rs.next()) {
                txtTitle.setText(rs.getString(3));
                txtareaAuthors.setText(rs.getString(5));
                txtareaPublisher.setText(rs.getString(6));
                txtCopyrightYear.setText(rs.getString(7));
                txtOriginalTotalPages.setText(rs.getInt(8) + "");
                txtCurrentTotalPages.setText(rs.getInt(9) + "");
                txtQuantity.setText(rs.getInt(10) + "");
            }
            pst = con.prepareStatement("SELECT * FROM tbl_subjects WHERE id = ?");
            pst.setInt(1, JFrame_BookList.subjectIdNumber);
            rs = pst.executeQuery();
            if (rs.next()) {
                subjectValue = rs.getString("subject");
            }
            cmbSubject.setSelectedItem(subjectValue);
            pst = con.prepareStatement("SELECT * FROM tbl_shelfs WHERE id = ?");
            pst.setInt(1, JFrame_BookList.shelfIdNumber);
            rs = pst.executeQuery();
            if (rs.next()) {
                shelfValue = rs.getString("shelf");
            }
            cmbShelf.setSelectedItem(shelfValue);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex);
            ex.printStackTrace();
        }
    }
    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void txtareaPublisherKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtareaPublisherKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_TAB) {
            if (!txtareaPublisher.getText().equals("")) {
                txtCopyrightYear.requestFocus();
            }
        }
    }//GEN-LAST:event_txtareaPublisherKeyPressed

    private void txtRFIDKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRFIDKeyReleased
        if (txtRFID.getText().equals("")) {
            btnDeleteOrCancel.setText("BACK");
        } else {
            btnDeleteOrCancel.setText("CANCEL");
        }
    }//GEN-LAST:event_txtRFIDKeyReleased

    private void txtRFIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRFIDKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || c == KeyEvent.VK_DELETE)) {
            evt.consume();
        }
        if (txtRFID.getText().length() >= 10) {
            evt.consume();
        }
    }//GEN-LAST:event_txtRFIDKeyTyped

    private void txtareaAuthorsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtareaAuthorsKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_TAB) {
            if (!txtareaAuthors.getText().equals("")) {
                txtareaPublisher.requestFocus();
            }
        }
    }//GEN-LAST:event_txtareaAuthorsKeyReleased

    private void txtCopyrightYearKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCopyrightYearKeyTyped
        if (txtCopyrightYear.getText().length() >= 45) {
            evt.consume();
        }
    }//GEN-LAST:event_txtCopyrightYearKeyTyped

    private void txtOriginalTotalPagesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtOriginalTotalPagesKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || c == KeyEvent.VK_DELETE)) {
            evt.consume();
        }
        if (txtOriginalTotalPages.getText().length() >= 4) {
            evt.consume();
        }
    }//GEN-LAST:event_txtOriginalTotalPagesKeyTyped

    private void txtCurrentTotalPagesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCurrentTotalPagesKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || c == KeyEvent.VK_DELETE)) {
            evt.consume();
        }
        if (txtCurrentTotalPages.getText().length() >= 4) {
            evt.consume();
        }
    }//GEN-LAST:event_txtCurrentTotalPagesKeyTyped

    private void txtQuantityKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQuantityKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || c == KeyEvent.VK_DELETE)) {
            evt.consume();
        }
        if (txtQuantity.getText().length() >= 6) {
            evt.consume();
        }
    }//GEN-LAST:event_txtQuantityKeyTyped

    private void txtTitleKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTitleKeyTyped
        if (txtTitle.getText().length() >= 60) {
            evt.consume();
        }
    }//GEN-LAST:event_txtTitleKeyTyped

    private void cmbShelfItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbShelfItemStateChanged
        if (!cmbShelf.getSelectedItem().equals("None")) {
            try {
                pst = con.prepareStatement("SELECT * FROM tbl_shelfs WHERE shelf = ?");
                pst.setString(1, cmbShelf.getSelectedItem().toString());
                rs = pst.executeQuery();
                if (rs.next()) {
                    shelfId = rs.getInt("id");
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex);
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_cmbShelfItemStateChanged

    private void cmbSubjectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbSubjectItemStateChanged
        if (!cmbSubject.getSelectedItem().equals("None")) {
            try {
                pst = con.prepareStatement("SELECT * FROM tbl_subjects WHERE subject = ?");
                pst.setString(1, cmbSubject.getSelectedItem().toString());
                rs = pst.executeQuery();
                if (rs.next()) {
                    subjectId = rs.getInt("id");
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex);
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_cmbSubjectItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrame_BookProfile.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrame_BookProfile.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrame_BookProfile.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrame_BookProfile.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrame_BookProfile().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnDeleteOrCancel;
    private javax.swing.JButton btnEditOrUpdate;
    public javax.swing.JComboBox<String> cmbShelf;
    public javax.swing.JComboBox<String> cmbSubject;
    public javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblAuthors;
    private javax.swing.JLabel lblBookTitle;
    private javax.swing.JLabel lblCopyrightYear;
    private javax.swing.JLabel lblCurrentTotalPages;
    private javax.swing.JLabel lblOriginalTotalPages;
    private javax.swing.JLabel lblPublisher;
    private javax.swing.JLabel lblQuantity;
    private javax.swing.JLabel lblRFID;
    private javax.swing.JLabel lblShelf;
    private javax.swing.JLabel lblSubject;
    private javax.swing.JLabel lblTitle;
    public javax.swing.JTextField txtCopyrightYear;
    public javax.swing.JTextField txtCurrentTotalPages;
    public javax.swing.JTextField txtOriginalTotalPages;
    public javax.swing.JTextField txtQuantity;
    public javax.swing.JTextField txtRFID;
    public javax.swing.JTextField txtTitle;
    public javax.swing.JTextArea txtareaAuthors;
    public javax.swing.JTextArea txtareaPublisher;
    // End of variables declaration//GEN-END:variables
}
