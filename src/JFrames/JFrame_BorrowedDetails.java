package JFrames;

import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import Connection.DatabaseConnection;
import static JFrames.Objects.con;
import static JFrames.Objects.cst;
import static JFrames.Objects.pst;
import static JFrames.Objects.rs;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;

/**
 *
 * @author Joshua C. Magoliman
 */
public class JFrame_BorrowedDetails extends javax.swing.JFrame {

    /**
     * Creates new form JFrame_BorrowedDetails
     */
    public static String previousValueOfTextBoxSearch = "";
    public static String previousValueOfComboBoxFilter = "None";
    private static int bookIDValue, studentIDValue;
    private static String bookRFIDValue, studentRFIDValue;

    public JFrame_BorrowedDetails() {
        initComponents();
        DatabaseConnection dbc = DatabaseConnection.getDatabaseConnection();
        con = dbc.getConnection();
        setIcon();
        reset();
        setBorrowingDetailsForTable();
        checkIfRowIsSelected();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JPANEL1 = new javax.swing.JPanel();
        btnBack = new javax.swing.JButton();
        cmbFilter = new javax.swing.JComboBox<>();
        txtSearch = new javax.swing.JTextField();
        lblTotalEntry = new javax.swing.JLabel();
        lblTitle = new javax.swing.JLabel();
        jsp_BookList = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblBorrowedDetailsList = new javax.swing.JTable();
        btnCopyTheBookRFID = new javax.swing.JButton();
        btnCopyTheStudentRFID = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("BORROWED DETAILS");
        setUndecorated(true);
        setResizable(false);
        setSize(new java.awt.Dimension(1347, 614));

        JPANEL1.setBackground(java.awt.Color.white);
        JPANEL1.setDoubleBuffered(false);
        JPANEL1.setMaximumSize(null);

        btnBack.setBackground(new java.awt.Color(0, 153, 0));
        btnBack.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnBack.setForeground(java.awt.Color.white);
        btnBack.setText("BACK");
        btnBack.setBorderPainted(false);
        btnBack.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBack.setFocusPainted(false);
        btnBack.setFocusable(false);
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        cmbFilter.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cmbFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Book RFID", "Student RFID", "Borrowed From", "Borrowed Until", "Actual Return", "Lent By", "Received By" }));
        cmbFilter.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        cmbFilter.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbFilterItemStateChanged(evt);
            }
        });

        txtSearch.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtSearch.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSearchKeyTyped(evt);
            }
        });

        lblTotalEntry.setBackground(new java.awt.Color(51, 0, 102));
        lblTotalEntry.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblTotalEntry.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblTotalEntry.setText("TOTAL ENTRY:");
        lblTotalEntry.setInheritsPopupMenu(false);

        lblTitle.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblTitle.setText("BORROWED DETAILS");

        tblBorrowedDetailsList.setBackground(java.awt.Color.white);
        tblBorrowedDetailsList.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        tblBorrowedDetailsList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblBorrowedDetailsList.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblBorrowedDetailsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblBorrowedDetailsListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblBorrowedDetailsList);

        jsp_BookList.setViewportView(jScrollPane1);

        btnCopyTheBookRFID.setBackground(new java.awt.Color(0, 153, 0));
        btnCopyTheBookRFID.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnCopyTheBookRFID.setForeground(java.awt.Color.white);
        btnCopyTheBookRFID.setText("COPY THE BOOK RFID");
        btnCopyTheBookRFID.setBorderPainted(false);
        btnCopyTheBookRFID.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCopyTheBookRFID.setFocusPainted(false);
        btnCopyTheBookRFID.setFocusable(false);
        btnCopyTheBookRFID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCopyTheBookRFIDActionPerformed(evt);
            }
        });

        btnCopyTheStudentRFID.setBackground(new java.awt.Color(0, 153, 0));
        btnCopyTheStudentRFID.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnCopyTheStudentRFID.setForeground(java.awt.Color.white);
        btnCopyTheStudentRFID.setText("COPY THE STUDENT RFID");
        btnCopyTheStudentRFID.setBorderPainted(false);
        btnCopyTheStudentRFID.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCopyTheStudentRFID.setFocusPainted(false);
        btnCopyTheStudentRFID.setFocusable(false);
        btnCopyTheStudentRFID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCopyTheStudentRFIDActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout JPANEL1Layout = new javax.swing.GroupLayout(JPANEL1);
        JPANEL1.setLayout(JPANEL1Layout);
        JPANEL1Layout.setHorizontalGroup(
            JPANEL1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPANEL1Layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(JPANEL1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(JPANEL1Layout.createSequentialGroup()
                        .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblTotalEntry))
                    .addGroup(JPANEL1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jsp_BookList, javax.swing.GroupLayout.PREFERRED_SIZE, 1212, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(JPANEL1Layout.createSequentialGroup()
                            .addComponent(cmbFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(357, 357, 357)
                            .addComponent(btnCopyTheBookRFID, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btnCopyTheStudentRFID, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(60, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JPANEL1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblTitle)
                .addGap(547, 547, 547))
        );
        JPANEL1Layout.setVerticalGroup(
            JPANEL1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPANEL1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(lblTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(JPANEL1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCopyTheBookRFID)
                    .addComponent(btnCopyTheStudentRFID))
                .addGap(9, 9, 9)
                .addComponent(jsp_BookList, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(JPANEL1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBack)
                    .addComponent(lblTotalEntry))
                .addGap(29, 29, 29))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(JPANEL1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(JPANEL1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
   private void reset() {
        if (previousValueOfTextBoxSearch != "" && previousValueOfComboBoxFilter != "None") {
            txtSearch.setText(previousValueOfTextBoxSearch);
            cmbFilter.setSelectedItem(previousValueOfComboBoxFilter);
        }
        this.txtSearch.requestFocus();
    }

    private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("ICON.png")));
    }

    private void checkIfRowIsSelected() {
        boolean isSelected;
        isSelected = tblBorrowedDetailsList.getSelectionModel().isSelectionEmpty();
        if (isSelected == true) {
            btnCopyTheBookRFID.setEnabled(false);
            btnCopyTheStudentRFID.setEnabled(false);
        } else {
            btnCopyTheBookRFID.setEnabled(true);
            btnCopyTheStudentRFID.setEnabled(true);
        }
    }

    private void setBorrowingDetailsForTable() {
        try {
            int rows = 0;
            int rowIndex = 0;
            pst = con.prepareStatement("SELECT * FROM vw_getallborroweddetails;");
            rs = pst.executeQuery();
            if (rs.next()) {
                rs.last();
                rows = rs.getRow();
                rs.beforeFirst();
            }
            String[][] data = new String[rows][14];
            while (rs.next()) {
                data[rowIndex][0] = rs.getString(1);
                data[rowIndex][1] = rs.getString(2);
                data[rowIndex][2] = rs.getString(3);
                data[rowIndex][3] = rs.getString(4);
                data[rowIndex][4] = rs.getString(5);
                data[rowIndex][5] = rs.getString(6);
                data[rowIndex][6] = rs.getString(7);
                data[rowIndex][7] = rs.getString(8);
                rowIndex++;
            }
            String[] cols = {"ID", "BOOK RFID", "STUDENT RFID", "BORROWED FROM", "BORROWED UNTIL", "ACTUAL RETURN", "LENT BY", "RECEIVED BY"};
            DefaultTableModel model = new DefaultTableModel(data, cols);
            tblBorrowedDetailsList.setRowHeight(25);
            tblBorrowedDetailsList.setModel(model);
            DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
            centerRenderer.setHorizontalAlignment(JLabel.CENTER);
            tblBorrowedDetailsList.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
            tblBorrowedDetailsList.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
            tblBorrowedDetailsList.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
            tblBorrowedDetailsList.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
            tblBorrowedDetailsList.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
            tblBorrowedDetailsList.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);
            tblBorrowedDetailsList.getColumnModel().getColumn(6).setCellRenderer(centerRenderer);
            tblBorrowedDetailsList.getColumnModel().getColumn(7).setCellRenderer(centerRenderer);
            tblBorrowedDetailsList.getColumnModel().getColumn(0).setWidth(0);
            tblBorrowedDetailsList.getColumnModel().getColumn(0).setMinWidth(0);
            tblBorrowedDetailsList.getColumnModel().getColumn(0).setMaxWidth(0);
            tblBorrowedDetailsList.getColumnModel().getColumn(1).setPreferredWidth(250);
            tblBorrowedDetailsList.getColumnModel().getColumn(2).setPreferredWidth(250);
            tblBorrowedDetailsList.getColumnModel().getColumn(3).setPreferredWidth(300);
            tblBorrowedDetailsList.getColumnModel().getColumn(4).setPreferredWidth(300);
            tblBorrowedDetailsList.getColumnModel().getColumn(5).setPreferredWidth(300);
            tblBorrowedDetailsList.getColumnModel().getColumn(6).setPreferredWidth(300);
            tblBorrowedDetailsList.getColumnModel().getColumn(7).setPreferredWidth(300);
            tblBorrowedDetailsList.setSelectionBackground(Color.ORANGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex);
            ex.printStackTrace();
        }
        this.lblTotalEntry.setText("TOTAL ENTRY: " + tblBorrowedDetailsList.getRowCount());
    }
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        previousValueOfTextBoxSearch = txtSearch.getText();
        previousValueOfComboBoxFilter = cmbFilter.getSelectedItem().toString();
        this.setVisible(false);
        JFrame_Main nextFrame = new JFrame_Main();
        nextFrame.setVisible(true);
    }//GEN-LAST:event_btnBackActionPerformed

    private void cmbFilterItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbFilterItemStateChanged
        txtSearch.requestFocus();
    }//GEN-LAST:event_cmbFilterItemStateChanged

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        if (txtSearch.getText().equals("")) {
            setBorrowingDetailsForTable();
            checkIfRowIsSelected();
        } else {
            searching();
            checkIfRowIsSelected();
        }
    }//GEN-LAST:event_txtSearchKeyReleased
    private void searching() {
        int rows = 0;
        int rowIndex = 0;
        try {
            if (cmbFilter.getSelectedItem().equals("None")) {
                setBorrowingDetailsForTable();
            } else if (cmbFilter.getSelectedItem().equals("Book RFID")) {
                cst = con.prepareCall("{call sp_GetBorrowedDetailsByBookRFID(?)}");
                cst.setString("param_BookRFID", "%" + txtSearch.getText() + "%");
                rs = cst.executeQuery();
                if (rs.next()) {
                    rs.last();
                    rows = rs.getRow();
                    rs.beforeFirst();
                }
                String[][] data = new String[rows][8];
                while (rs.next()) {
                    data[rowIndex][0] = rs.getString(1);
                    data[rowIndex][1] = rs.getString(2);
                    data[rowIndex][2] = rs.getString(3);
                    data[rowIndex][3] = rs.getString(4);
                    data[rowIndex][4] = rs.getString(5);
                    data[rowIndex][5] = rs.getString(6);
                    data[rowIndex][6] = rs.getString(7);
                    data[rowIndex][7] = rs.getString(8);
                    rowIndex++;
                }
                String[] cols = {"ID", "BOOK RFID", "STUDENT RFID", "BORROWED FROM", "BORROWED UNTIL", "ACTUAL RETURN", "LENT BY", "RECEIVED BY"};
                DefaultTableModel model = new DefaultTableModel(data, cols);
                tblBorrowedDetailsList.setRowHeight(25);
                tblBorrowedDetailsList.setModel(model);
                DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
                centerRenderer.setHorizontalAlignment(JLabel.CENTER);
                tblBorrowedDetailsList.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(6).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(7).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(0).setWidth(0);
                tblBorrowedDetailsList.getColumnModel().getColumn(0).setMinWidth(0);
                tblBorrowedDetailsList.getColumnModel().getColumn(0).setMaxWidth(0);
                tblBorrowedDetailsList.getColumnModel().getColumn(1).setPreferredWidth(250);
                tblBorrowedDetailsList.getColumnModel().getColumn(2).setPreferredWidth(250);
                tblBorrowedDetailsList.getColumnModel().getColumn(3).setPreferredWidth(300);
                tblBorrowedDetailsList.getColumnModel().getColumn(4).setPreferredWidth(300);
                tblBorrowedDetailsList.getColumnModel().getColumn(5).setPreferredWidth(300);
                tblBorrowedDetailsList.getColumnModel().getColumn(6).setPreferredWidth(300);
                tblBorrowedDetailsList.getColumnModel().getColumn(7).setPreferredWidth(300);
                tblBorrowedDetailsList.setSelectionBackground(Color.ORANGE);
            } else if (cmbFilter.getSelectedItem().equals("Student RFID")) {
                cst = con.prepareCall("{call sp_GetBorrowedDetailsByStudentRFID(?)}");
                cst.setString("param_StudentRFID", "%" + txtSearch.getText() + "%");
                rs = cst.executeQuery();
                if (rs.next()) {
                    rs.last();
                    rows = rs.getRow();
                    rs.beforeFirst();
                }
                String[][] data = new String[rows][8];
                while (rs.next()) {
                    data[rowIndex][0] = rs.getString(1);
                    data[rowIndex][1] = rs.getString(2);
                    data[rowIndex][2] = rs.getString(3);
                    data[rowIndex][3] = rs.getString(4);
                    data[rowIndex][4] = rs.getString(5);
                    data[rowIndex][5] = rs.getString(6);
                    data[rowIndex][6] = rs.getString(7);
                    data[rowIndex][7] = rs.getString(8);
                    rowIndex++;
                }
                String[] cols = {"ID", "BOOK RFID", "STUDENT RFID", "BORROWED FROM", "BORROWED UNTIL", "ACTUAL RETURN", "LENT BY", "RECEIVED BY"};
                DefaultTableModel model = new DefaultTableModel(data, cols);
                tblBorrowedDetailsList.setRowHeight(25);
                tblBorrowedDetailsList.setModel(model);
                DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
                centerRenderer.setHorizontalAlignment(JLabel.CENTER);
                tblBorrowedDetailsList.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(6).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(7).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(0).setWidth(0);
                tblBorrowedDetailsList.getColumnModel().getColumn(0).setMinWidth(0);
                tblBorrowedDetailsList.getColumnModel().getColumn(0).setMaxWidth(0);
                tblBorrowedDetailsList.getColumnModel().getColumn(1).setPreferredWidth(250);
                tblBorrowedDetailsList.getColumnModel().getColumn(2).setPreferredWidth(250);
                tblBorrowedDetailsList.getColumnModel().getColumn(3).setPreferredWidth(300);
                tblBorrowedDetailsList.getColumnModel().getColumn(4).setPreferredWidth(300);
                tblBorrowedDetailsList.getColumnModel().getColumn(5).setPreferredWidth(300);
                tblBorrowedDetailsList.getColumnModel().getColumn(6).setPreferredWidth(300);
                tblBorrowedDetailsList.getColumnModel().getColumn(7).setPreferredWidth(300);
                tblBorrowedDetailsList.setSelectionBackground(Color.ORANGE);
            } else if (cmbFilter.getSelectedItem().equals("Borrowed From")) {
                cst = con.prepareCall("{call sp_GetBorrowedDetailsByBorrowedFrom(?)}");
                cst.setString("param_BorrowedFrom", "%" + txtSearch.getText() + "%");
                rs = cst.executeQuery();
                if (rs.next()) {
                    rs.last();
                    rows = rs.getRow();
                    rs.beforeFirst();
                }
                String[][] data = new String[rows][8];
                while (rs.next()) {
                    data[rowIndex][0] = rs.getString(1);
                    data[rowIndex][1] = rs.getString(2);
                    data[rowIndex][2] = rs.getString(3);
                    data[rowIndex][3] = rs.getString(4);
                    data[rowIndex][4] = rs.getString(5);
                    data[rowIndex][5] = rs.getString(6);
                    data[rowIndex][6] = rs.getString(7);
                    data[rowIndex][7] = rs.getString(8);
                    rowIndex++;
                }
                String[] cols = {"ID", "BOOK RFID", "STUDENT RFID", "BORROWED FROM", "BORROWED UNTIL", "ACTUAL RETURN", "LENT BY", "RECEIVED BY"};
                DefaultTableModel model = new DefaultTableModel(data, cols);
                tblBorrowedDetailsList.setRowHeight(25);
                tblBorrowedDetailsList.setModel(model);
                DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
                centerRenderer.setHorizontalAlignment(JLabel.CENTER);
                tblBorrowedDetailsList.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(6).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(7).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(0).setWidth(0);
                tblBorrowedDetailsList.getColumnModel().getColumn(0).setMinWidth(0);
                tblBorrowedDetailsList.getColumnModel().getColumn(0).setMaxWidth(0);
                tblBorrowedDetailsList.getColumnModel().getColumn(1).setPreferredWidth(250);
                tblBorrowedDetailsList.getColumnModel().getColumn(2).setPreferredWidth(250);
                tblBorrowedDetailsList.getColumnModel().getColumn(3).setPreferredWidth(300);
                tblBorrowedDetailsList.getColumnModel().getColumn(4).setPreferredWidth(300);
                tblBorrowedDetailsList.getColumnModel().getColumn(5).setPreferredWidth(300);
                tblBorrowedDetailsList.getColumnModel().getColumn(6).setPreferredWidth(300);
                tblBorrowedDetailsList.getColumnModel().getColumn(7).setPreferredWidth(300);
                tblBorrowedDetailsList.setSelectionBackground(Color.ORANGE);
            } else if (cmbFilter.getSelectedItem().equals("Borrowed Until")) {
                cst = con.prepareCall("{call sp_GetBorrowedDetailsByBorrowedUntil(?)}");
                cst.setString("param_BorrowedUntil", "%" + txtSearch.getText() + "%");
                rs = cst.executeQuery();
                if (rs.next()) {
                    rs.last();
                    rows = rs.getRow();
                    rs.beforeFirst();
                }
                String[][] data = new String[rows][8];
                while (rs.next()) {
                    data[rowIndex][0] = rs.getString(1);
                    data[rowIndex][1] = rs.getString(2);
                    data[rowIndex][2] = rs.getString(3);
                    data[rowIndex][3] = rs.getString(4);
                    data[rowIndex][4] = rs.getString(5);
                    data[rowIndex][5] = rs.getString(6);
                    data[rowIndex][6] = rs.getString(7);
                    data[rowIndex][7] = rs.getString(8);
                    rowIndex++;
                }
                String[] cols = {"ID", "BOOK RFID", "STUDENT RFID", "BORROWED FROM", "BORROWED UNTIL", "ACTUAL RETURN", "LENT BY", "RECEIVED BY"};
                DefaultTableModel model = new DefaultTableModel(data, cols);
                tblBorrowedDetailsList.setRowHeight(25);
                tblBorrowedDetailsList.setModel(model);
                DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
                centerRenderer.setHorizontalAlignment(JLabel.CENTER);
                tblBorrowedDetailsList.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(6).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(7).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(0).setWidth(0);
                tblBorrowedDetailsList.getColumnModel().getColumn(0).setMinWidth(0);
                tblBorrowedDetailsList.getColumnModel().getColumn(0).setMaxWidth(0);
                tblBorrowedDetailsList.getColumnModel().getColumn(1).setPreferredWidth(250);
                tblBorrowedDetailsList.getColumnModel().getColumn(2).setPreferredWidth(250);
                tblBorrowedDetailsList.getColumnModel().getColumn(3).setPreferredWidth(300);
                tblBorrowedDetailsList.getColumnModel().getColumn(4).setPreferredWidth(300);
                tblBorrowedDetailsList.getColumnModel().getColumn(5).setPreferredWidth(300);
                tblBorrowedDetailsList.getColumnModel().getColumn(6).setPreferredWidth(300);
                tblBorrowedDetailsList.getColumnModel().getColumn(7).setPreferredWidth(300);
                tblBorrowedDetailsList.setSelectionBackground(Color.ORANGE);
            } else if (cmbFilter.getSelectedItem().equals("Actual Return")) {
                cst = con.prepareCall("{call sp_GetBorrowedDetailsByActualReturn(?)}");
                cst.setString("param_ActualReturn", "%" + txtSearch.getText() + "%");
                rs = cst.executeQuery();
                if (rs.next()) {
                    rs.last();
                    rows = rs.getRow();
                    rs.beforeFirst();
                }
                String[][] data = new String[rows][8];
                while (rs.next()) {
                    data[rowIndex][0] = rs.getString(1);
                    data[rowIndex][1] = rs.getString(2);
                    data[rowIndex][2] = rs.getString(3);
                    data[rowIndex][3] = rs.getString(4);
                    data[rowIndex][4] = rs.getString(5);
                    data[rowIndex][5] = rs.getString(6);
                    data[rowIndex][6] = rs.getString(7);
                    data[rowIndex][7] = rs.getString(8);
                    rowIndex++;
                }
                String[] cols = {"ID", "BOOK RFID", "STUDENT RFID", "BORROWED FROM", "BORROWED UNTIL", "ACTUAL RETURN", "LENT BY", "RECEIVED BY"};
                DefaultTableModel model = new DefaultTableModel(data, cols);
                tblBorrowedDetailsList.setRowHeight(25);
                tblBorrowedDetailsList.setModel(model);
                DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
                centerRenderer.setHorizontalAlignment(JLabel.CENTER);
                tblBorrowedDetailsList.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(6).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(7).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(0).setWidth(0);
                tblBorrowedDetailsList.getColumnModel().getColumn(0).setMinWidth(0);
                tblBorrowedDetailsList.getColumnModel().getColumn(0).setMaxWidth(0);
                tblBorrowedDetailsList.getColumnModel().getColumn(1).setPreferredWidth(250);
                tblBorrowedDetailsList.getColumnModel().getColumn(2).setPreferredWidth(250);
                tblBorrowedDetailsList.getColumnModel().getColumn(3).setPreferredWidth(300);
                tblBorrowedDetailsList.getColumnModel().getColumn(4).setPreferredWidth(300);
                tblBorrowedDetailsList.getColumnModel().getColumn(5).setPreferredWidth(300);
                tblBorrowedDetailsList.getColumnModel().getColumn(6).setPreferredWidth(300);
                tblBorrowedDetailsList.getColumnModel().getColumn(7).setPreferredWidth(300);
                tblBorrowedDetailsList.setSelectionBackground(Color.ORANGE);
            } else if (cmbFilter.getSelectedItem().equals("Lent By")) {
                cst = con.prepareCall("{call sp_GetBorrowedDetailsByLentBy(?)}");
                cst.setString("param_LentBy", "%" + txtSearch.getText() + "%");
                rs = cst.executeQuery();
                if (rs.next()) {
                    rs.last();
                    rows = rs.getRow();
                    rs.beforeFirst();
                }
                String[][] data = new String[rows][8];
                while (rs.next()) {
                    data[rowIndex][0] = rs.getString(1);
                    data[rowIndex][1] = rs.getString(2);
                    data[rowIndex][2] = rs.getString(3);
                    data[rowIndex][3] = rs.getString(4);
                    data[rowIndex][4] = rs.getString(5);
                    data[rowIndex][5] = rs.getString(6);
                    data[rowIndex][6] = rs.getString(7);
                    data[rowIndex][7] = rs.getString(8);
                    rowIndex++;
                }
                String[] cols = {"ID", "BOOK RFID", "STUDENT RFID", "BORROWED FROM", "BORROWED UNTIL", "ACTUAL RETURN", "LENT BY", "RECEIVED BY"};
                DefaultTableModel model = new DefaultTableModel(data, cols);
                tblBorrowedDetailsList.setRowHeight(25);
                tblBorrowedDetailsList.setModel(model);
                DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
                centerRenderer.setHorizontalAlignment(JLabel.CENTER);
                tblBorrowedDetailsList.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(6).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(7).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(0).setWidth(0);
                tblBorrowedDetailsList.getColumnModel().getColumn(0).setMinWidth(0);
                tblBorrowedDetailsList.getColumnModel().getColumn(0).setMaxWidth(0);
                tblBorrowedDetailsList.getColumnModel().getColumn(1).setPreferredWidth(250);
                tblBorrowedDetailsList.getColumnModel().getColumn(2).setPreferredWidth(250);
                tblBorrowedDetailsList.getColumnModel().getColumn(3).setPreferredWidth(300);
                tblBorrowedDetailsList.getColumnModel().getColumn(4).setPreferredWidth(300);
                tblBorrowedDetailsList.getColumnModel().getColumn(5).setPreferredWidth(300);
                tblBorrowedDetailsList.getColumnModel().getColumn(6).setPreferredWidth(300);
                tblBorrowedDetailsList.getColumnModel().getColumn(7).setPreferredWidth(300);
                tblBorrowedDetailsList.setSelectionBackground(Color.ORANGE);
            } else if (cmbFilter.getSelectedItem().equals("Received By")) {
                cst = con.prepareCall("{call sp_GetBorrowedDetailsByReceivedBy(?)}");
                cst.setString("param_ReceivedBy", "%" + txtSearch.getText() + "%");
                rs = cst.executeQuery();
                if (rs.next()) {
                    rs.last();
                    rows = rs.getRow();
                    rs.beforeFirst();
                }
                String[][] data = new String[rows][8];
                while (rs.next()) {
                    data[rowIndex][0] = rs.getString(1);
                    data[rowIndex][1] = rs.getString(2);
                    data[rowIndex][2] = rs.getString(3);
                    data[rowIndex][3] = rs.getString(4);
                    data[rowIndex][4] = rs.getString(5);
                    data[rowIndex][5] = rs.getString(6);
                    data[rowIndex][6] = rs.getString(7);
                    data[rowIndex][7] = rs.getString(8);
                    rowIndex++;
                }
                String[] cols = {"ID", "BOOK RFID", "STUDENT RFID", "BORROWED FROM", "BORROWED UNTIL", "ACTUAL RETURN", "LENT BY", "RECEIVED BY"};
                DefaultTableModel model = new DefaultTableModel(data, cols);
                tblBorrowedDetailsList.setRowHeight(25);
                tblBorrowedDetailsList.setModel(model);
                DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
                centerRenderer.setHorizontalAlignment(JLabel.CENTER);
                tblBorrowedDetailsList.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(6).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(7).setCellRenderer(centerRenderer);
                tblBorrowedDetailsList.getColumnModel().getColumn(0).setWidth(0);
                tblBorrowedDetailsList.getColumnModel().getColumn(0).setMinWidth(0);
                tblBorrowedDetailsList.getColumnModel().getColumn(0).setMaxWidth(0);
                tblBorrowedDetailsList.getColumnModel().getColumn(1).setPreferredWidth(250);
                tblBorrowedDetailsList.getColumnModel().getColumn(2).setPreferredWidth(250);
                tblBorrowedDetailsList.getColumnModel().getColumn(3).setPreferredWidth(300);
                tblBorrowedDetailsList.getColumnModel().getColumn(4).setPreferredWidth(300);
                tblBorrowedDetailsList.getColumnModel().getColumn(5).setPreferredWidth(300);
                tblBorrowedDetailsList.getColumnModel().getColumn(6).setPreferredWidth(300);
                tblBorrowedDetailsList.getColumnModel().getColumn(7).setPreferredWidth(300);
                tblBorrowedDetailsList.setSelectionBackground(Color.ORANGE);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex);
            ex.printStackTrace();
        }
        this.lblTotalEntry.setText("TOTAL ENTRY: " + tblBorrowedDetailsList.getRowCount());
    }
    private void txtSearchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyTyped
        String stringHolder = (String) cmbFilter.getSelectedItem();
        char c = evt.getKeyChar();
        switch (stringHolder) {
            case "None":
                if (!(Character.isAlphabetic(c) || Character.isDigit(c) || c == KeyEvent.VK_DELETE || Character.isWhitespace(c))) {
                    evt.consume();
                }
                if (txtSearch.getText().length() >= 10) {
                    evt.consume();
                }
                break;
            case "Book RFID":
                if (!(Character.isDigit(c) || c == KeyEvent.VK_DELETE)) {
                    evt.consume();
                }
                if (txtSearch.getText().length() >= 10) {
                    evt.consume();
                }
                break;
            case "Student RFID":
                if (!(Character.isDigit(c) || c == KeyEvent.VK_DELETE)) {
                    evt.consume();
                }
                if (txtSearch.getText().length() >= 10) {
                    evt.consume();
                }
                break;
            case "Borrowed From":
                if (txtSearch.getText().length() >= 19) {
                    evt.consume();
                }
                break;
            case "Borrowed Until":
                if (txtSearch.getText().length() >= 10) {
                    evt.consume();
                }
                break;
            case "Actual Return":
                if (txtSearch.getText().length() >= 19) {
                    evt.consume();
                }
                break;
            case "Lent By":
                if (txtSearch.getText().length() >= 50) {
                    evt.consume();
                }
                break;
            case "Received By":
                if (txtSearch.getText().length() >= 50) {
                    evt.consume();
                }
                break;
        }
    }//GEN-LAST:event_txtSearchKeyTyped

    private void tblBorrowedDetailsListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblBorrowedDetailsListMouseClicked
        try {
            int bookId = Integer.parseInt((this.tblBorrowedDetailsList.getValueAt(this.tblBorrowedDetailsList.getSelectedRow(), 0).toString()));
            pst = con.prepareStatement("SELECT * FROM tbl_borrowed_details WHERE id = ?");
            pst.setInt(1, bookId);
            rs = pst.executeQuery();
            if (rs.next()) {
                bookIDValue = rs.getInt("book_id");
                studentIDValue = rs.getInt("student_id");
            }
            pst = con.prepareStatement("SELECT * FROM tbl_books WHERE id = ?");
            pst.setInt(1, bookIDValue);
            rs = pst.executeQuery();
            if (rs.next()) {
                bookRFIDValue = rs.getString("rfid");
            }
            pst = con.prepareStatement("SELECT * FROM tbl_students WHERE id = ?");
            pst.setInt(1, studentIDValue);
            rs = pst.executeQuery();
            if (rs.next()) {
                studentRFIDValue = rs.getString("rfid");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex);
            ex.printStackTrace();
        }
        checkIfRowIsSelected();
    }//GEN-LAST:event_tblBorrowedDetailsListMouseClicked

    private void btnCopyTheBookRFIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCopyTheBookRFIDActionPerformed
        if (bookRFIDValue != "") {
            StringSelection stringSelection = new StringSelection(bookRFIDValue);
            Clipboard clipBoard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipBoard.setContents(stringSelection, null);
            JOptionPane.showMessageDialog(this, "Successfully copied the Book RFID!", "ATTENTION", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnCopyTheBookRFIDActionPerformed

    private void btnCopyTheStudentRFIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCopyTheStudentRFIDActionPerformed
        if (studentRFIDValue != "") {
            StringSelection stringSelection = new StringSelection(studentRFIDValue);
            Clipboard clipBoard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipBoard.setContents(stringSelection, null);
            JOptionPane.showMessageDialog(this, "Successfully copied the Student RFID!", "ATTENTION", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnCopyTheStudentRFIDActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrame_BorrowedDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrame_BorrowedDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrame_BorrowedDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrame_BorrowedDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrame_BorrowedDetails().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JPanel JPANEL1;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCopyTheBookRFID;
    private javax.swing.JButton btnCopyTheStudentRFID;
    private javax.swing.JComboBox<String> cmbFilter;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jsp_BookList;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblTotalEntry;
    private javax.swing.JTable tblBorrowedDetailsList;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

}
