/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package JFrames;

import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import Connection.DatabaseConnection;
import static JFrames.Objects.con;
import static JFrames.Objects.cst;
import static JFrames.Objects.pst;
import static JFrames.Objects.rs;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.imageio.ImageIO;

/**
 *
 * @author Joshua C. Magoliman
 */
public class JFrame_StudentProfile extends javax.swing.JFrame {

    /**
     * Creates new form JFrame_StudentProfile
     */
    private String imagePath, gradeLevelValue;
    public int genderId, gradeLevelId;

    public JFrame_StudentProfile() {
        initComponents();
        DatabaseConnection dbc = DatabaseConnection.getDatabaseConnection();
        con = dbc.getConnection();
        setIcon();
        reset();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel = new javax.swing.JPanel();
        lblProfile = new javax.swing.JLabel();
        btnEditOrUpdate = new javax.swing.JButton();
        btnDeleteOrCancel = new javax.swing.JButton();
        btnBrowse = new javax.swing.JButton();
        txtFullName = new javax.swing.JTextField();
        txtAge = new javax.swing.JTextField();
        lblFullName = new javax.swing.JLabel();
        lblGender = new javax.swing.JLabel();
        lblDateOfBirth = new javax.swing.JLabel();
        rbtnMale = new javax.swing.JRadioButton();
        rbtnFemale = new javax.swing.JRadioButton();
        lblAge = new javax.swing.JLabel();
        lblAddress = new javax.swing.JLabel();
        txtAddress = new javax.swing.JTextField();
        lblRFID = new javax.swing.JLabel();
        txtRFID = new javax.swing.JTextField();
        lblGradeLevel = new javax.swing.JLabel();
        cmbGradeLevel = new javax.swing.JComboBox<>();
        lblContactNumber = new javax.swing.JLabel();
        txtContactNumber = new javax.swing.JTextField();
        btnClose = new javax.swing.JButton();
        dcDateOfBirth = new com.toedter.calendar.JDateChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ADD NEW STUDENT");
        setResizable(false);

        jPanel.setBackground(new java.awt.Color(0, 153, 0));
        jPanel.setForeground(new java.awt.Color(0, 153, 0));
        jPanel.setMaximumSize(null);
        jPanel.setPreferredSize(new java.awt.Dimension(1294, 447));
        jPanel.setRequestFocusEnabled(false);

        lblProfile.setBackground(new java.awt.Color(51, 255, 255));
        lblProfile.setOpaque(true);

        btnEditOrUpdate.setBackground(java.awt.Color.black);
        btnEditOrUpdate.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnEditOrUpdate.setForeground(java.awt.Color.white);
        btnEditOrUpdate.setText("EDIT");
        btnEditOrUpdate.setBorderPainted(false);
        btnEditOrUpdate.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEditOrUpdate.setFocusable(false);
        btnEditOrUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditOrUpdateActionPerformed(evt);
            }
        });

        btnDeleteOrCancel.setBackground(java.awt.Color.black);
        btnDeleteOrCancel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnDeleteOrCancel.setForeground(java.awt.Color.white);
        btnDeleteOrCancel.setText("DELETE");
        btnDeleteOrCancel.setBorderPainted(false);
        btnDeleteOrCancel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDeleteOrCancel.setDefaultCapable(false);
        btnDeleteOrCancel.setFocusable(false);
        btnDeleteOrCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteOrCancelActionPerformed(evt);
            }
        });

        btnBrowse.setBackground(java.awt.Color.black);
        btnBrowse.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnBrowse.setForeground(java.awt.Color.white);
        btnBrowse.setText("BROWSE");
        btnBrowse.setBorderPainted(false);
        btnBrowse.setFocusable(false);
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });

        txtFullName.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        txtFullName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtFullNameKeyTyped(evt);
            }
        });

        txtAge.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        txtAge.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtAgeKeyTyped(evt);
            }
        });

        lblFullName.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        lblFullName.setForeground(java.awt.Color.white);
        lblFullName.setText("Full Name");

        lblGender.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        lblGender.setForeground(java.awt.Color.white);
        lblGender.setText("Gender");

        lblDateOfBirth.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        lblDateOfBirth.setForeground(java.awt.Color.white);
        lblDateOfBirth.setText("Date of Birth");

        rbtnMale.setBackground(java.awt.Color.white);
        rbtnMale.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        rbtnMale.setText("Male");
        rbtnMale.setFocusable(false);
        rbtnMale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnMaleActionPerformed(evt);
            }
        });

        rbtnFemale.setBackground(java.awt.Color.white);
        rbtnFemale.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        rbtnFemale.setText("Female");
        rbtnFemale.setFocusable(false);
        rbtnFemale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnFemaleActionPerformed(evt);
            }
        });

        lblAge.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        lblAge.setForeground(java.awt.Color.white);
        lblAge.setText("Age");

        lblAddress.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        lblAddress.setForeground(java.awt.Color.white);
        lblAddress.setText("Address");

        txtAddress.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N

        lblRFID.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        lblRFID.setForeground(java.awt.Color.white);
        lblRFID.setText("RFID");

        txtRFID.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        txtRFID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtRFIDKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtRFIDKeyTyped(evt);
            }
        });

        lblGradeLevel.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        lblGradeLevel.setForeground(java.awt.Color.white);
        lblGradeLevel.setText("Grade Level");

        cmbGradeLevel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cmbGradeLevel.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbGradeLevelItemStateChanged(evt);
            }
        });

        lblContactNumber.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        lblContactNumber.setForeground(java.awt.Color.white);
        lblContactNumber.setText("Contact Number");

        txtContactNumber.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        txtContactNumber.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtContactNumberKeyTyped(evt);
            }
        });

        btnClose.setBackground(java.awt.Color.black);
        btnClose.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnClose.setForeground(java.awt.Color.white);
        btnClose.setText("CLOSE");
        btnClose.setBorderPainted(false);
        btnClose.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnClose.setDefaultCapable(false);
        btnClose.setFocusable(false);
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        dcDateOfBirth.setBackground(java.awt.Color.white);
        dcDateOfBirth.setForeground(java.awt.Color.black);
        dcDateOfBirth.setDateFormatString("yyyy-MM-dd");
        dcDateOfBirth.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        javax.swing.GroupLayout jPanelLayout = new javax.swing.GroupLayout(jPanel);
        jPanel.setLayout(jPanelLayout);
        jPanelLayout.setHorizontalGroup(
            jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLayout.createSequentialGroup()
                .addContainerGap(81, Short.MAX_VALUE)
                .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelLayout.createSequentialGroup()
                        .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelLayout.createSequentialGroup()
                                .addGap(349, 349, 349)
                                .addComponent(btnEditOrUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(44, 44, 44)
                                .addComponent(btnDeleteOrCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelLayout.createSequentialGroup()
                                .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanelLayout.createSequentialGroup()
                                        .addGap(9, 9, 9)
                                        .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(lblFullName)
                                            .addComponent(lblGender)
                                            .addComponent(lblAddress)
                                            .addComponent(lblRFID)))
                                    .addComponent(lblGradeLevel, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanelLayout.createSequentialGroup()
                                        .addComponent(rbtnMale)
                                        .addGap(18, 18, 18)
                                        .addComponent(rbtnFemale)
                                        .addGap(18, 18, 18)
                                        .addComponent(lblDateOfBirth)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(dcDateOfBirth, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(12, 12, 12)
                                        .addComponent(lblAge)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(txtRFID, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanelLayout.createSequentialGroup()
                                        .addComponent(cmbGradeLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(lblContactNumber)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtContactNumber))
                                    .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 780, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtFullName, javax.swing.GroupLayout.PREFERRED_SIZE, 455, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(52, 52, 52)
                                .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblProfile, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnBrowse, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(55, 55, 55))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelLayout.createSequentialGroup()
                        .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22))))
        );
        jPanelLayout.setVerticalGroup(
            jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(btnClose)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelLayout.createSequentialGroup()
                        .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblRFID)
                            .addComponent(txtRFID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtFullName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblFullName))
                        .addGap(19, 19, 19)
                        .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblGender)
                                .addComponent(rbtnMale)
                                .addComponent(rbtnFemale)
                                .addComponent(lblDateOfBirth)
                                .addComponent(lblAge)
                                .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(dcDateOfBirth, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblAddress)
                            .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblGradeLevel)
                            .addComponent(txtContactNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblContactNumber)
                            .addComponent(cmbGradeLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(62, 62, 62)
                        .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnDeleteOrCancel)
                            .addComponent(btnEditOrUpdate)))
                    .addGroup(jPanelLayout.createSequentialGroup()
                        .addComponent(lblProfile, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnBrowse)))
                .addGap(42, 42, 42))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("ICON.png")));
    }

    private void reset() {
        lblRFID.requestFocus();
        txtRFID.setFocusable(false);
        txtRFID.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        txtFullName.setFocusable(false);
        txtFullName.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        rbtnMale.setFocusable(false);
        rbtnMale.setEnabled(false);
        rbtnMale.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        rbtnFemale.setFocusable(false);
        rbtnFemale.setEnabled(false);
        rbtnFemale.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        dcDateOfBirth.setFocusable(false);
        dcDateOfBirth.setEnabled(false);
        dcDateOfBirth.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        txtAge.setFocusable(false);
        txtAge.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        txtAddress.setFocusable(false);
        txtAddress.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        cmbGradeLevel.setFocusable(false);
        cmbGradeLevel.setEnabled(false);
        cmbGradeLevel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        txtContactNumber.setFocusable(false);
        txtContactNumber.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnClose.setEnabled(true);
        btnBrowse.setEnabled(false);
        btnEditOrUpdate.setText("EDIT");
        btnDeleteOrCancel.setText("DELETE");
    }

    private void enabled() {
        txtFullName.requestFocus();
        txtFullName.setFocusable(true);
        txtFullName.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        rbtnMale.setFocusable(true);
        rbtnMale.setEnabled(true);
        rbtnMale.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        rbtnFemale.setFocusable(true);
        rbtnFemale.setEnabled(true);
        rbtnFemale.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        dcDateOfBirth.setFocusable(true);
        dcDateOfBirth.setEnabled(true);
        dcDateOfBirth.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtAge.setFocusable(true);
        txtAge.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtAddress.setFocusable(true);
        txtAddress.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        cmbGradeLevel.setEnabled(true);
        cmbGradeLevel.setFocusable(true);
        cmbGradeLevel.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtContactNumber.setFocusable(true);
        txtContactNumber.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        btnBrowse.setEnabled(true);
    }

    private void validation() {
        if (txtFullName.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "No Last Name Found!", "ATTENTION", JOptionPane.ERROR_MESSAGE);
            txtFullName.requestFocus();
        } else if (rbtnMale.isSelected() == false && rbtnFemale.isSelected() == false) {
            JOptionPane.showMessageDialog(this, "No Gender Found!", "ATTENTION", JOptionPane.ERROR_MESSAGE);
        } else if (dcDateOfBirth.getDate().equals("")) {
            JOptionPane.showMessageDialog(this, "No Date of Birth Found!", "ATTENTION", JOptionPane.ERROR_MESSAGE);
            dcDateOfBirth.requestFocus();
        } else if (txtAge.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "No Age Found!", "ATTENTION", JOptionPane.ERROR_MESSAGE);
            txtAge.requestFocus();
        } else if (txtAddress.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "No Address Found!", "ATTENTION", JOptionPane.ERROR_MESSAGE);
            txtAddress.requestFocus();
        } else if (cmbGradeLevel.getSelectedItem().equals("None")) {
            JOptionPane.showMessageDialog(this, "No Grade Level Found!", "ATTENTION", JOptionPane.ERROR_MESSAGE);
            cmbGradeLevel.requestFocus();
        } else if (txtContactNumber.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "No Contact Number Found!", "ATTENTION", JOptionPane.ERROR_MESSAGE);
            txtContactNumber.requestFocus();
        } else {
            updatingStudent();
        }
    }

    private void updatingStudent() {
        try {
            String holder = dcDateOfBirth.getDate().toString();
            DateFormat pattern = new SimpleDateFormat("E MMM dd HH:mm:ss z yyyy");
            Date myDate = pattern.parse(holder);
            java.sql.Date converted = new java.sql.Date(myDate.getTime());
            if (imagePath != null) {
                cst = con.prepareCall("{call sp_UpdateExistingStudent(?, ?, ?, ?, ?, ?, ?, ?, ?)}");
                cst.setString(1, txtFullName.getText());
                cst.setInt(2, genderId);
                cst.setDate(3, converted);
                cst.setString(4, txtAge.getText());
                cst.setString(5, txtAddress.getText());
                cst.setInt(6, gradeLevelId);
                cst.setString(7, txtContactNumber.getText());
                InputStream inputStream = new FileInputStream(new File(imagePath));
                cst.setBlob(8, inputStream);
                cst.setString(9, txtRFID.getText());
                if (cst.executeUpdate() == 1) {
                    JOptionPane.showMessageDialog(this, "Successfully Updated!", "ATTENTION", JOptionPane.INFORMATION_MESSAGE);
                    reset();
                }
            } else if (imagePath == null) {
                pst = con.prepareStatement("UPDATE tbl_students SET full_name=?, gender_id=?, date_of_birth=?, age=?, address=?, grade_level_id=?, contact_number=? WHERE rfid=?");
                pst.setString(1, txtFullName.getText());
                pst.setInt(2, genderId);
                pst.setDate(3, converted);
                pst.setString(4, txtAge.getText());
                pst.setString(5, txtAddress.getText());
                pst.setInt(6, gradeLevelId);
                pst.setString(7, txtContactNumber.getText());
                pst.setString(8, txtRFID.getText());
                if (pst.executeUpdate() == 1) {
                    JOptionPane.showMessageDialog(this, "Successfully Updated!", "ATTENTION", JOptionPane.INFORMATION_MESSAGE);
                    reset();
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex);
            ex.printStackTrace();
        }
    }


    private void btnEditOrUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditOrUpdateActionPerformed
        switch (btnEditOrUpdate.getText()) {
            case "EDIT":
                btnEditOrUpdate.setText("UPDATE");
                btnDeleteOrCancel.setText("CANCEL");
                btnClose.setEnabled(false);
                enabled();
                break;
            case "UPDATE":
                int P = JOptionPane.showConfirmDialog(null, "Are you sure want to update?", "ATTENTION", JOptionPane.YES_NO_OPTION);
                if (P == JOptionPane.YES_OPTION) //(P==0) //YES FOR 0 NO FOR 1
                {
                    validation();
                }
                break;
        }
    }//GEN-LAST:event_btnEditOrUpdateActionPerformed
    private void btnDeleteOrCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteOrCancelActionPerformed
        if (btnDeleteOrCancel.getText().equals("DELETE")) {
            int P = JOptionPane.showConfirmDialog(null, "Are you sure want to delete?", "ATTENTION", JOptionPane.YES_NO_OPTION);
            if (P == JOptionPane.YES_OPTION) //(P==0) //YES FOR 0 NO FOR 1
            {
                deleting();
            }
        } else if (btnDeleteOrCancel.getText().equals("CANCEL")) {
            int P = JOptionPane.showConfirmDialog(null, " Are you sure want to cancel?", "ATTENTION", JOptionPane.YES_NO_OPTION);
            if (P == JOptionPane.YES_OPTION) //(P==0) //YES FOR 0 NO FOR 1
            {
                cancelling();
            }
        }
    }//GEN-LAST:event_btnDeleteOrCancelActionPerformed

    public void retrieveGradeLevels() {
        try {
            pst = con.prepareStatement("SELECT * FROM tbl_grade_levels WHERE id = ?");
            pst.setInt(1, gradeLevelId);
            rs = pst.executeQuery();
            if (rs.next()) {
                gradeLevelValue = rs.getString("grade_level");
            }
            pst = con.prepareStatement("SELECT MAX(id) FROM tbl_grade_levels");
            rs = pst.executeQuery();
            if (rs.next()) {
                int maximumSubjectNumber = rs.getInt(1);
                cmbGradeLevel.insertItemAt("None", 0);
                for (int startNumber = 1; startNumber <= maximumSubjectNumber; startNumber = startNumber + 1) {
                    pst = con.prepareStatement("SELECT * FROM tbl_grade_levels WHERE id = ?");
                    pst.setInt(1, startNumber);
                    rs = pst.executeQuery();
                    if (rs.next()) {
                        String gradeLevel = "";
                        gradeLevel = rs.getString("grade_level");
                        cmbGradeLevel.addItem(gradeLevel);
                    }
                }
                cmbGradeLevel.setSelectedItem(gradeLevelValue);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex);
            ex.printStackTrace();
        }
    }

    private void deleting() {
        try {
            cst = con.prepareCall("{call sp_DeleteExistingStudent(?)}");
            cst.setString(1, txtRFID.getText());
            if (cst.executeUpdate() == 1) {
                JOptionPane.showMessageDialog(this, "Successfully Deleted!", "ATTENTION", JOptionPane.INFORMATION_MESSAGE);
                this.dispose();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex);
            ex.printStackTrace();
        }
    }

    private void cancelling() {
        reset();
        retrieveCurrentInfo();
    }

    private void retrieveCurrentInfo() {
        try {
            pst = con.prepareStatement("SELECT * FROM tbl_students WHERE rfid = ?");
            pst.setString(1, txtRFID.getText());
            rs = pst.executeQuery();
            if (rs.next()) {
                txtFullName.setText(rs.getString(3));
                int gender = rs.getInt(4);
                if (1 == gender) {
                    rbtnMale.setSelected(true);
                } else if (2 == gender) {
                    rbtnFemale.setSelected(true);
                }
                dcDateOfBirth.setDate(rs.getDate(5));
                txtAge.setText(rs.getString(6));
                txtAddress.setText(rs.getString(7));
                gradeLevelId = rs.getInt(8);
                txtContactNumber.setText(rs.getString(9));
                byte[] imagedata = rs.getBytes("photo");
                ImageIcon format = new ImageIcon(scaledImage(imagedata, lblProfile.getWidth(), lblProfile.getHeight()));
                lblProfile.setIcon(format);
            }
            pst = con.prepareStatement("SELECT * FROM tbl_grade_levels WHERE id = ?");
            pst.setInt(1, gradeLevelId);
            rs = pst.executeQuery();
            if (rs.next()) {
                gradeLevelValue = rs.getString("grade_level");
            }
            cmbGradeLevel.setSelectedItem(gradeLevelValue);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex);
            ex.printStackTrace();
        }
    }

    private Image scaledImage(byte[] img, int w, int h) {
        BufferedImage resizedImage = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);
        try {
            Graphics2D g2 = resizedImage.createGraphics();
            g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
            ByteArrayInputStream in = new ByteArrayInputStream(img);
            BufferedImage bImageFromConvert = ImageIO.read(in);
            g2.drawImage(bImageFromConvert, 0, 0, w, h, null);
            g2.dispose();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex);
            ex.printStackTrace();
        }
        return resizedImage;
    }

    private ImageIcon resizeImage(String imagePath, byte[] pic) {
        ImageIcon myImage = null;
        if (imagePath != null) {
            myImage = new ImageIcon(imagePath);
        } else {
            myImage = new ImageIcon(pic);
        }
        Image img = myImage.getImage();
        Image newImg = img.getScaledInstance(lblProfile.getWidth(), lblProfile.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon image = new ImageIcon(newImg);
        return image;
    }
    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
        btnBrowseClicked();
    }//GEN-LAST:event_btnBrowseActionPerformed
    private void btnBrowseClicked() {
        JFileChooser file = new JFileChooser();
        file.setCurrentDirectory(new File(System.getProperty("user.home")));
        FileNameExtensionFilter filter = new FileNameExtensionFilter("*.image", "jpg", "png");
        file.addChoosableFileFilter(filter);
        int result = file.showSaveDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = file.getSelectedFile();
            String path = selectedFile.getAbsolutePath();
            lblProfile.setIcon(resizeImage(path, null));
            imagePath = path;
        } else {
            JOptionPane.showMessageDialog(this, "No File Selected!", "ATTENTION", JOptionPane.ERROR_MESSAGE);
        }
    }
    private void txtFullNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFullNameKeyTyped
        if (txtFullName.getText().length() >= 50) {
            evt.consume();
        }
    }//GEN-LAST:event_txtFullNameKeyTyped
    private void txtAgeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAgeKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || c == KeyEvent.VK_DELETE)) {
            evt.consume();
        }
        if (txtAge.getText().length() >= 2) {
            evt.consume();
        }
    }//GEN-LAST:event_txtAgeKeyTyped
    private void rbtnMaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnMaleActionPerformed
        genderId = 1;
        if (rbtnMale.isSelected() == true) {
            rbtnFemale.setSelected(false);
        }
    }//GEN-LAST:event_rbtnMaleActionPerformed
    private void rbtnFemaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnFemaleActionPerformed
        genderId = 2;
        if (rbtnFemale.isSelected() == true) {
            rbtnMale.setSelected(false);
        }
    }//GEN-LAST:event_rbtnFemaleActionPerformed

    private void txtRFIDKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRFIDKeyReleased
        if (!txtRFID.getText().equals("")) {
            btnDeleteOrCancel.setText("CANCEL");
        } else {
            btnDeleteOrCancel.setText("BACK");
        }
    }//GEN-LAST:event_txtRFIDKeyReleased

    private void txtRFIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRFIDKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || c == KeyEvent.VK_DELETE)) {
            evt.consume();
        }
        if (txtRFID.getText().length() >= 10) {
            evt.consume();
        }
    }//GEN-LAST:event_txtRFIDKeyTyped

    private void txtContactNumberKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtContactNumberKeyTyped
        if (txtContactNumber.getText().length() >= 40) {
            evt.consume();
        }
    }//GEN-LAST:event_txtContactNumberKeyTyped

    private void cmbGradeLevelItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbGradeLevelItemStateChanged
        if (!cmbGradeLevel.getSelectedItem().equals("None")) {
            switch (cmbGradeLevel.getSelectedItem().toString()) {
                case "Grade 7":
                    gradeLevelId = 1;
                    break;
                case "Grade 8":
                    gradeLevelId = 2;
                    break;
                case "Grade 9":
                    gradeLevelId = 3;
                    break;
                case "Grade 10":
                    gradeLevelId = 4;
                    break;
                case "Grade 11":
                    gradeLevelId = 5;
                    break;
                case "Grade 12":
                    gradeLevelId = 6;
                    break;
            }
        }
    }//GEN-LAST:event_cmbGradeLevelItemStateChanged

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCloseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrame_StudentProfile.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrame_StudentProfile.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrame_StudentProfile.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrame_StudentProfile.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrame_StudentProfile().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowse;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnDeleteOrCancel;
    private javax.swing.JButton btnEditOrUpdate;
    public javax.swing.JComboBox<String> cmbGradeLevel;
    public com.toedter.calendar.JDateChooser dcDateOfBirth;
    private javax.swing.JPanel jPanel;
    private javax.swing.JLabel lblAddress;
    private javax.swing.JLabel lblAge;
    private javax.swing.JLabel lblContactNumber;
    private javax.swing.JLabel lblDateOfBirth;
    private javax.swing.JLabel lblFullName;
    private javax.swing.JLabel lblGender;
    private javax.swing.JLabel lblGradeLevel;
    public javax.swing.JLabel lblProfile;
    private javax.swing.JLabel lblRFID;
    public javax.swing.JRadioButton rbtnFemale;
    public javax.swing.JRadioButton rbtnMale;
    public javax.swing.JTextField txtAddress;
    public javax.swing.JTextField txtAge;
    public javax.swing.JTextField txtContactNumber;
    public javax.swing.JTextField txtFullName;
    public javax.swing.JTextField txtRFID;
    // End of variables declaration//GEN-END:variables
}
