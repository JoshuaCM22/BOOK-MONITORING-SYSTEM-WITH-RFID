package JFrames;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import Connection.DatabaseConnection;
import static JFrames.Objects.cst;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

/**
 *
 * @author Joshua C. Magoliman
 */
public class JFrame_StudentList extends javax.swing.JFrame {

    /**
     * Creates new form JFrame_StudentList
     */
    private Connection con;
    private ResultSet rs = null;
    private PreparedStatement pst = null;

    public JFrame_StudentList() {
        initComponents();
        DatabaseConnection dbc = DatabaseConnection.getDatabaseConnection();
        con = dbc.getConnection();
        setIcon();
        reset();
        setStudentsInformationForTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JPANEL1 = new javax.swing.JPanel();
        cmbFilter = new javax.swing.JComboBox<>();
        txtSearch = new javax.swing.JTextField();
        lblTitle = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        lblTotalEntry = new javax.swing.JLabel();
        btnAddNewStudent = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblStudentList = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);
        setSize(new java.awt.Dimension(1347, 614));

        JPANEL1.setBackground(java.awt.Color.white);
        JPANEL1.setDoubleBuffered(false);
        JPANEL1.setMaximumSize(null);

        cmbFilter.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cmbFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "RFID", "Full Name", "Gender", "Date Of Birth", "Age", "Address", "Grade Level", "Contact Number" }));
        cmbFilter.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        cmbFilter.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbFilterItemStateChanged(evt);
            }
        });

        txtSearch.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtSearch.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSearchKeyTyped(evt);
            }
        });

        lblTitle.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblTitle.setText("STUDENT LIST");

        btnBack.setBackground(new java.awt.Color(0, 153, 0));
        btnBack.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnBack.setForeground(java.awt.Color.white);
        btnBack.setText("BACK");
        btnBack.setBorderPainted(false);
        btnBack.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBack.setFocusPainted(false);
        btnBack.setFocusable(false);
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblTotalEntry.setBackground(new java.awt.Color(51, 0, 102));
        lblTotalEntry.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblTotalEntry.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblTotalEntry.setText("TOTAL ENTRY:");
        lblTotalEntry.setInheritsPopupMenu(false);

        btnAddNewStudent.setBackground(new java.awt.Color(0, 153, 0));
        btnAddNewStudent.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnAddNewStudent.setForeground(java.awt.Color.white);
        btnAddNewStudent.setText("ADD NEW STUDENT");
        btnAddNewStudent.setBorderPainted(false);
        btnAddNewStudent.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAddNewStudent.setFocusPainted(false);
        btnAddNewStudent.setFocusable(false);
        btnAddNewStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewStudentActionPerformed(evt);
            }
        });

        tblStudentList.setBackground(java.awt.Color.white);
        tblStudentList.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        tblStudentList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblStudentList.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblStudentList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblStudentListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblStudentList);

        javax.swing.GroupLayout JPANEL1Layout = new javax.swing.GroupLayout(JPANEL1);
        JPANEL1.setLayout(JPANEL1Layout);
        JPANEL1Layout.setHorizontalGroup(
            JPANEL1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JPANEL1Layout.createSequentialGroup()
                .addGap(530, 530, 530)
                .addComponent(lblTitle)
                .addGap(581, 581, 581))
            .addGroup(JPANEL1Layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(JPANEL1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(JPANEL1Layout.createSequentialGroup()
                        .addComponent(cmbFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(JPANEL1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btnAddNewStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, JPANEL1Layout.createSequentialGroup()
                            .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(1080, 1080, 1080)))
                    .addGroup(JPANEL1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(lblTotalEntry)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1209, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(54, 54, 54))
        );
        JPANEL1Layout.setVerticalGroup(
            JPANEL1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JPANEL1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(lblTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(JPANEL1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddNewStudent))
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(JPANEL1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(lblTotalEntry))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(JPANEL1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(JPANEL1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
 private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("ICON.png")));
    }

    private void reset() {
        txtSearch.setText("");
        this.txtSearch.requestFocus();
    }

    private void setStudentsInformationForTable() {
        try {
            int rows = 0;
            int rowIndex = 0;
            pst = con.prepareStatement("SELECT * FROM vw_getallstudents");
            rs = pst.executeQuery();
            if (rs.next()) {
                rs.last();
                rows = rs.getRow();
                rs.beforeFirst();
            }
            String[][] data = new String[rows][9];
            while (rs.next()) {
                data[rowIndex][0] = rs.getInt(1) + "";
                data[rowIndex][1] = rs.getString(2);
                data[rowIndex][2] = rs.getString(3);
                data[rowIndex][3] = rs.getString(4);
                data[rowIndex][4] = rs.getString(5);
                data[rowIndex][5] = rs.getInt(6) + "";
                data[rowIndex][6] = rs.getString(7);
                data[rowIndex][7] = rs.getString(8);
                data[rowIndex][8] = rs.getString(9);
                rowIndex++;
            }
            String[] cols = {"ID", "RFID", "FULL NAME", "GENDER", "DATE OF BIRTH", "AGE", "ADDRESS", "GRADE LEVEL", "CONTACT NUMBER"};
            DefaultTableModel model = new DefaultTableModel(data, cols);
            tblStudentList.setRowHeight(25);
            tblStudentList.setModel(model);
            DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
            centerRenderer.setHorizontalAlignment(JLabel.CENTER);
            tblStudentList.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
            tblStudentList.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
            tblStudentList.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
            tblStudentList.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
            tblStudentList.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
            tblStudentList.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);
            tblStudentList.getColumnModel().getColumn(6).setCellRenderer(centerRenderer);
            tblStudentList.getColumnModel().getColumn(7).setCellRenderer(centerRenderer);
            tblStudentList.getColumnModel().getColumn(8).setCellRenderer(centerRenderer);
            tblStudentList.getColumnModel().getColumn(0).setWidth(0);
            tblStudentList.getColumnModel().getColumn(0).setMinWidth(0);
            tblStudentList.getColumnModel().getColumn(0).setMaxWidth(0);
            tblStudentList.getColumnModel().getColumn(1).setPreferredWidth(250);
            tblStudentList.getColumnModel().getColumn(2).setPreferredWidth(600);
            tblStudentList.getColumnModel().getColumn(3).setPreferredWidth(170);
            tblStudentList.getColumnModel().getColumn(4).setPreferredWidth(200);
            tblStudentList.getColumnModel().getColumn(5).setPreferredWidth(170);
            tblStudentList.getColumnModel().getColumn(6).setPreferredWidth(700);
            tblStudentList.getColumnModel().getColumn(7).setPreferredWidth(200);
            tblStudentList.getColumnModel().getColumn(8).setPreferredWidth(400);
            tblStudentList.setSelectionBackground(Color.ORANGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex);
            ex.printStackTrace();
        }
        this.lblTotalEntry.setText("TOTAL ENTRY: " + tblStudentList.getRowCount());
    }

    private void retrieveStudentInformations() {
        try {
            int studentId = Integer.parseInt((this.tblStudentList.getValueAt(this.tblStudentList.getSelectedRow(), 0).toString()));
            pst = con.prepareStatement("SELECT * FROM tbl_students WHERE id = ?");
            pst.setInt(1, studentId);
            rs = pst.executeQuery();
            if (rs.next()) {
                JFrame frame = this;
                frame.setEnabled(false);
                JFrame_StudentProfile nextFrame = new JFrame_StudentProfile();
                btnBack.setVisible(false);
                btnAddNewStudent.setVisible(false);
                cmbFilter.setVisible(false);
                txtSearch.setVisible(false);
                nextFrame.setLocationRelativeTo(this);
                nextFrame.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosed(java.awt.event.WindowEvent windowEvent) {
                        if (txtSearch.getText().equals("")) {
                            setStudentsInformationForTable();
                        } else {
                            searching();
                        }
                        frame.setEnabled(true);
                        frame.toFront();
                        btnBack.setVisible(true);
                        btnAddNewStudent.setVisible(true);
                        cmbFilter.setVisible(true);
                        txtSearch.setVisible(true);
                        txtSearch.requestFocus();
                    }
                });
                nextFrame.txtRFID.setText(rs.getString(2));
                nextFrame.txtFullName.setText(rs.getString(3));
                nextFrame.genderId = (rs.getInt(4));
                if (1 == nextFrame.genderId) {
                    nextFrame.rbtnMale.setSelected(true);
                } else if (2 == nextFrame.genderId) {
                    nextFrame.rbtnFemale.setSelected(true);
                }
                nextFrame.dcDateOfBirth.setDate(rs.getDate(5));
                nextFrame.txtAge.setText(rs.getString(6));
                nextFrame.txtAddress.setText(rs.getString(7));
                nextFrame.gradeLevelId = (rs.getInt(8));
                nextFrame.retrieveGradeLevels();
                nextFrame.txtContactNumber.setText(rs.getString(9));
                byte[] imageByte = rs.getBytes("photo");
                ImageIcon format = new ImageIcon(scaledImage(imageByte, nextFrame.lblProfile.getWidth(), nextFrame.lblProfile.getHeight()));
                nextFrame.lblProfile.setIcon(format);
                nextFrame.toFront();
                nextFrame.setVisible(true);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex);
            ex.printStackTrace();
        }
    }

    private Image scaledImage(byte[] img, int w, int h) {
        BufferedImage resizedImage = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);
        try {
            Graphics2D g2 = resizedImage.createGraphics();
            g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
            ByteArrayInputStream in = new ByteArrayInputStream(img);
            BufferedImage bImageFromConvert = ImageIO.read(in);
            g2.drawImage(bImageFromConvert, 0, 0, w, h, null);
            g2.dispose();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex);
            ex.printStackTrace();
        }
        return resizedImage;
    }

    private void txtSearchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyTyped
        String stringHolder = (String) cmbFilter.getSelectedItem();
        char c = evt.getKeyChar();
        switch (stringHolder) {
            case "None":
                if (!(Character.isAlphabetic(c) || Character.isDigit(c) || c == KeyEvent.VK_DELETE || Character.isWhitespace(c))) {
                    evt.consume();
                }
                if (txtSearch.getText().length() >= 10) {
                    evt.consume();
                }
                break;
            case "RFID":
                if (!(Character.isDigit(c) || c == KeyEvent.VK_DELETE)) {
                    evt.consume();
                }
                if (txtSearch.getText().length() >= 10) {
                    evt.consume();
                }
                break;
            case "Full Name":
                if (txtSearch.getText().length() >= 43) {
                    evt.consume();
                }
                break;
            case "Gender":
                if (!(Character.isAlphabetic(c) || c == KeyEvent.VK_DELETE)) {
                    evt.consume();
                }
                if (txtSearch.getText().length() >= 6) {
                    evt.consume();
                }
                break;
            case "Date Of Birth":
                if (txtSearch.getText().length() >= 10) {
                    evt.consume();
                }
                break;
            case "Age":
                if (!(Character.isDigit(c) || c == KeyEvent.VK_DELETE)) {
                    evt.consume();
                }
                if (txtSearch.getText().length() >= 2) {
                    evt.consume();
                }
                break;
            case "Grade Level":
                if (!(Character.isAlphabetic(c) || Character.isDigit(c) || c == KeyEvent.VK_DELETE || Character.isWhitespace(c))) {
                    evt.consume();
                }
                if (txtSearch.getText().length() >= 8) {
                    evt.consume();
                }
                break;
            case "Contact Number":
                if (txtSearch.getText().length() >= 40) {
                    evt.consume();
                }
                break;
        }
    }//GEN-LAST:event_txtSearchKeyTyped

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        if (txtSearch.getText().equals("")) {
            setStudentsInformationForTable();
        } else {
            searching();
        }
    }//GEN-LAST:event_txtSearchKeyReleased
    private void searching() {
        int rows = 0;
        int rowIndex = 0;
        try {
            if (cmbFilter.getSelectedItem().equals("None")) {
                setStudentsInformationForTable();
            } else if (cmbFilter.getSelectedItem().equals("RFID")) {
                cst = con.prepareCall("{call sp_GetStudentByRFID(?)}");
                cst.setString("param_RFID", "%" + txtSearch.getText() + "%");
                rs = cst.executeQuery();
                if (rs.next()) {
                    rs.last();
                    rows = rs.getRow();
                    rs.beforeFirst();
                }
                String[][] data = new String[rows][9];
                while (rs.next()) {
                    data[rowIndex][0] = rs.getString(1);
                    data[rowIndex][1] = rs.getString(2);
                    data[rowIndex][2] = rs.getString(3);
                    data[rowIndex][3] = rs.getString(4);
                    data[rowIndex][4] = rs.getString(5);
                    data[rowIndex][5] = rs.getString(6);
                    data[rowIndex][6] = rs.getString(7);
                    data[rowIndex][7] = rs.getString(8);
                    data[rowIndex][8] = rs.getString(9);
                    rowIndex++;
                }
                String[] cols = {"ID", "RFID", "FULL NAME", "GENDER", "DATE OF BIRTH", "AGE", "ADDRESS", "GRADE LEVEL", "CONTACT NUMBER"};
                DefaultTableModel model = new DefaultTableModel(data, cols);
                tblStudentList.setRowHeight(25);
                tblStudentList.setModel(model);
                DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
                centerRenderer.setHorizontalAlignment(JLabel.CENTER);
                tblStudentList.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(6).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(7).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(8).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(0).setWidth(0);
                tblStudentList.getColumnModel().getColumn(0).setMinWidth(0);
                tblStudentList.getColumnModel().getColumn(0).setMaxWidth(0);
                tblStudentList.getColumnModel().getColumn(1).setPreferredWidth(250);
                tblStudentList.getColumnModel().getColumn(2).setPreferredWidth(600);
                tblStudentList.getColumnModel().getColumn(3).setPreferredWidth(170);
                tblStudentList.getColumnModel().getColumn(4).setPreferredWidth(200);
                tblStudentList.getColumnModel().getColumn(5).setPreferredWidth(170);
                tblStudentList.getColumnModel().getColumn(6).setPreferredWidth(700);
                tblStudentList.getColumnModel().getColumn(7).setPreferredWidth(200);
                tblStudentList.getColumnModel().getColumn(8).setPreferredWidth(400);
                tblStudentList.setSelectionBackground(Color.ORANGE);
            } else if (cmbFilter.getSelectedItem().equals("Full Name")) {
                cst = con.prepareCall("{call sp_GetStudentByFullName(?)}");
                cst.setString("param_FullName", "%" + txtSearch.getText() + "%");
                rs = cst.executeQuery();
                if (rs.next()) {
                    rs.last();
                    rows = rs.getRow();
                    rs.beforeFirst();
                }
                String[][] data = new String[rows][9];
                while (rs.next()) {
                    data[rowIndex][0] = rs.getString(1);
                    data[rowIndex][1] = rs.getString(2);
                    data[rowIndex][2] = rs.getString(3);
                    data[rowIndex][3] = rs.getString(4);
                    data[rowIndex][4] = rs.getString(5);
                    data[rowIndex][5] = rs.getString(6);
                    data[rowIndex][6] = rs.getString(7);
                    data[rowIndex][7] = rs.getString(8);
                    data[rowIndex][8] = rs.getString(9);
                    rowIndex++;
                }
                String[] cols = {"ID", "RFID", "FULL NAME", "GENDER", "DATE OF BIRTH", "AGE", "ADDRESS", "GRADE LEVEL", "CONTACT NUMBER"};
                DefaultTableModel model = new DefaultTableModel(data, cols);
                tblStudentList.setRowHeight(25);
                tblStudentList.setModel(model);
                DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
                centerRenderer.setHorizontalAlignment(JLabel.CENTER);
                tblStudentList.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(6).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(7).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(8).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(0).setWidth(0);
                tblStudentList.getColumnModel().getColumn(0).setMinWidth(0);
                tblStudentList.getColumnModel().getColumn(0).setMaxWidth(0);
                tblStudentList.getColumnModel().getColumn(1).setPreferredWidth(250);
                tblStudentList.getColumnModel().getColumn(2).setPreferredWidth(600);
                tblStudentList.getColumnModel().getColumn(3).setPreferredWidth(170);
                tblStudentList.getColumnModel().getColumn(4).setPreferredWidth(200);
                tblStudentList.getColumnModel().getColumn(5).setPreferredWidth(170);
                tblStudentList.getColumnModel().getColumn(6).setPreferredWidth(700);
                tblStudentList.getColumnModel().getColumn(7).setPreferredWidth(200);
                tblStudentList.getColumnModel().getColumn(8).setPreferredWidth(400);
                tblStudentList.setSelectionBackground(Color.ORANGE);
            } else if (cmbFilter.getSelectedItem().equals("Gender")) {
                cst = con.prepareCall("{call sp_GetStudentByGender(?)}");
                cst.setString("param_Gender", txtSearch.getText() + "%");
                rs = cst.executeQuery();
                if (rs.next()) {
                    rs.last();
                    rows = rs.getRow();
                    rs.beforeFirst();
                }
                String[][] data = new String[rows][9];
                while (rs.next()) {
                    data[rowIndex][0] = rs.getString(1);
                    data[rowIndex][1] = rs.getString(2);
                    data[rowIndex][2] = rs.getString(3);
                    data[rowIndex][3] = rs.getString(4);
                    data[rowIndex][4] = rs.getString(5);
                    data[rowIndex][5] = rs.getString(6);
                    data[rowIndex][6] = rs.getString(7);
                    data[rowIndex][7] = rs.getString(8);
                    data[rowIndex][8] = rs.getString(9);
                    rowIndex++;
                }
                String[] cols = {"ID", "RFID", "FULL NAME", "GENDER", "DATE OF BIRTH", "AGE", "ADDRESS", "GRADE LEVEL", "CONTACT NUMBER"};
                DefaultTableModel model = new DefaultTableModel(data, cols);
                tblStudentList.setRowHeight(25);
                tblStudentList.setModel(model);
                DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
                centerRenderer.setHorizontalAlignment(JLabel.CENTER);
                tblStudentList.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(6).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(7).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(8).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(0).setWidth(0);
                tblStudentList.getColumnModel().getColumn(0).setMinWidth(0);
                tblStudentList.getColumnModel().getColumn(0).setMaxWidth(0);
                tblStudentList.getColumnModel().getColumn(1).setPreferredWidth(250);
                tblStudentList.getColumnModel().getColumn(2).setPreferredWidth(600);
                tblStudentList.getColumnModel().getColumn(3).setPreferredWidth(170);
                tblStudentList.getColumnModel().getColumn(4).setPreferredWidth(200);
                tblStudentList.getColumnModel().getColumn(5).setPreferredWidth(170);
                tblStudentList.getColumnModel().getColumn(6).setPreferredWidth(700);
                tblStudentList.getColumnModel().getColumn(7).setPreferredWidth(200);
                tblStudentList.getColumnModel().getColumn(8).setPreferredWidth(400);
                tblStudentList.setSelectionBackground(Color.ORANGE);
            } else if (cmbFilter.getSelectedItem().equals("Date Of Birth")) {
                cst = con.prepareCall("{call sp_GetStudentByDateOfBirth(?)}");
                cst.setString("param_DateOfBirth", "%" + txtSearch.getText() + "%");
                rs = cst.executeQuery();
                if (rs.next()) {
                    rs.last();
                    rows = rs.getRow();
                    rs.beforeFirst();
                }
                String[][] data = new String[rows][9];
                while (rs.next()) {
                    data[rowIndex][0] = rs.getString(1);
                    data[rowIndex][1] = rs.getString(2);
                    data[rowIndex][2] = rs.getString(3);
                    data[rowIndex][3] = rs.getString(4);
                    data[rowIndex][4] = rs.getString(5);
                    data[rowIndex][5] = rs.getString(6);
                    data[rowIndex][6] = rs.getString(7);
                    data[rowIndex][7] = rs.getString(8);
                    data[rowIndex][8] = rs.getString(9);
                    rowIndex++;
                }
                String[] cols = {"ID", "RFID", "FULL NAME", "GENDER", "DATE OF BIRTH", "AGE", "ADDRESS", "GRADE LEVEL", "CONTACT NUMBER"};
                DefaultTableModel model = new DefaultTableModel(data, cols);
                tblStudentList.setRowHeight(25);
                tblStudentList.setModel(model);
                DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
                centerRenderer.setHorizontalAlignment(JLabel.CENTER);
                tblStudentList.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(6).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(7).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(8).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(0).setWidth(0);
                tblStudentList.getColumnModel().getColumn(0).setMinWidth(0);
                tblStudentList.getColumnModel().getColumn(0).setMaxWidth(0);
                tblStudentList.getColumnModel().getColumn(1).setPreferredWidth(250);
                tblStudentList.getColumnModel().getColumn(2).setPreferredWidth(600);
                tblStudentList.getColumnModel().getColumn(3).setPreferredWidth(170);
                tblStudentList.getColumnModel().getColumn(4).setPreferredWidth(200);
                tblStudentList.getColumnModel().getColumn(5).setPreferredWidth(170);
                tblStudentList.getColumnModel().getColumn(6).setPreferredWidth(700);
                tblStudentList.getColumnModel().getColumn(7).setPreferredWidth(200);
                tblStudentList.getColumnModel().getColumn(8).setPreferredWidth(400);
                tblStudentList.setSelectionBackground(Color.ORANGE);
            } else if (cmbFilter.getSelectedItem().equals("Age")) {
                cst = con.prepareCall("{call sp_GetStudentByAge(?)}");
                cst.setString("param_Age", txtSearch.getText());
                rs = cst.executeQuery();
                if (rs.next()) {
                    rs.last();
                    rows = rs.getRow();
                    rs.beforeFirst();
                }
                String[][] data = new String[rows][9];
                while (rs.next()) {
                    data[rowIndex][0] = rs.getString(1);
                    data[rowIndex][1] = rs.getString(2);
                    data[rowIndex][2] = rs.getString(3);
                    data[rowIndex][3] = rs.getString(4);
                    data[rowIndex][4] = rs.getString(5);
                    data[rowIndex][5] = rs.getString(6);
                    data[rowIndex][6] = rs.getString(7);
                    data[rowIndex][7] = rs.getString(8);
                    data[rowIndex][8] = rs.getString(9);
                    rowIndex++;
                }
                String[] cols = {"ID", "RFID", "FULL NAME", "GENDER", "DATE OF BIRTH", "AGE", "ADDRESS", "GRADE LEVEL", "CONTACT NUMBER"};
                DefaultTableModel model = new DefaultTableModel(data, cols);
                tblStudentList.setRowHeight(25);
                tblStudentList.setModel(model);
                DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
                centerRenderer.setHorizontalAlignment(JLabel.CENTER);
                tblStudentList.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(6).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(7).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(8).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(0).setWidth(0);
                tblStudentList.getColumnModel().getColumn(0).setMinWidth(0);
                tblStudentList.getColumnModel().getColumn(0).setMaxWidth(0);
                tblStudentList.getColumnModel().getColumn(1).setPreferredWidth(250);
                tblStudentList.getColumnModel().getColumn(2).setPreferredWidth(600);
                tblStudentList.getColumnModel().getColumn(3).setPreferredWidth(170);
                tblStudentList.getColumnModel().getColumn(4).setPreferredWidth(200);
                tblStudentList.getColumnModel().getColumn(5).setPreferredWidth(170);
                tblStudentList.getColumnModel().getColumn(6).setPreferredWidth(700);
                tblStudentList.getColumnModel().getColumn(7).setPreferredWidth(200);
                tblStudentList.getColumnModel().getColumn(8).setPreferredWidth(400);
                tblStudentList.setSelectionBackground(Color.ORANGE);
            } else if (cmbFilter.getSelectedItem().equals("Address")) {
                cst = con.prepareCall("{call sp_GetStudentByAddress(?)}");
                cst.setString("param_Address", "%" + txtSearch.getText() + "%");
                rs = cst.executeQuery();
                if (rs.next()) {
                    rs.last();
                    rows = rs.getRow();
                    rs.beforeFirst();
                }
                String[][] data = new String[rows][9];
                while (rs.next()) {
                    data[rowIndex][0] = rs.getString(1);
                    data[rowIndex][1] = rs.getString(2);
                    data[rowIndex][2] = rs.getString(3);
                    data[rowIndex][3] = rs.getString(4);
                    data[rowIndex][4] = rs.getString(5);
                    data[rowIndex][5] = rs.getString(6);
                    data[rowIndex][6] = rs.getString(7);
                    data[rowIndex][7] = rs.getString(8);
                    data[rowIndex][8] = rs.getString(9);
                    rowIndex++;
                }
                String[] cols = {"ID", "RFID", "FULL NAME", "GENDER", "DATE OF BIRTH", "AGE", "ADDRESS", "GRADE LEVEL", "CONTACT NUMBER"};
                DefaultTableModel model = new DefaultTableModel(data, cols);
                tblStudentList.setRowHeight(25);
                tblStudentList.setModel(model);
                DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
                centerRenderer.setHorizontalAlignment(JLabel.CENTER);
                tblStudentList.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(6).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(7).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(8).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(0).setWidth(0);
                tblStudentList.getColumnModel().getColumn(0).setMinWidth(0);
                tblStudentList.getColumnModel().getColumn(0).setMaxWidth(0);
                tblStudentList.getColumnModel().getColumn(1).setPreferredWidth(250);
                tblStudentList.getColumnModel().getColumn(2).setPreferredWidth(600);
                tblStudentList.getColumnModel().getColumn(3).setPreferredWidth(170);
                tblStudentList.getColumnModel().getColumn(4).setPreferredWidth(200);
                tblStudentList.getColumnModel().getColumn(5).setPreferredWidth(170);
                tblStudentList.getColumnModel().getColumn(6).setPreferredWidth(700);
                tblStudentList.getColumnModel().getColumn(7).setPreferredWidth(200);
                tblStudentList.getColumnModel().getColumn(8).setPreferredWidth(400);
                tblStudentList.setSelectionBackground(Color.ORANGE);
            } else if (cmbFilter.getSelectedItem().equals("Date Of Birth")) {
                cst = con.prepareCall("{call sp_GetStudentByDateOfBirth(?)}");
                cst.setString("param_DateOfBirth", "%" + txtSearch.getText() + "%");
                rs = cst.executeQuery();
                if (rs.next()) {
                    rs.last();
                    rows = rs.getRow();
                    rs.beforeFirst();
                }
                String[][] data = new String[rows][9];
                while (rs.next()) {
                    data[rowIndex][0] = rs.getString(1);
                    data[rowIndex][1] = rs.getString(2);
                    data[rowIndex][2] = rs.getString(3);
                    data[rowIndex][3] = rs.getString(4);
                    data[rowIndex][4] = rs.getString(5);
                    data[rowIndex][5] = rs.getString(6);
                    data[rowIndex][6] = rs.getString(7);
                    data[rowIndex][7] = rs.getString(8);
                    data[rowIndex][8] = rs.getString(9);
                    rowIndex++;
                }
                String[] cols = {"ID", "RFID", "FULL NAME", "GENDER", "DATE OF BIRTH", "AGE", "ADDRESS", "GRADE LEVEL", "CONTACT NUMBER"};
                DefaultTableModel model = new DefaultTableModel(data, cols);
                tblStudentList.setRowHeight(25);
                tblStudentList.setModel(model);
                DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
                centerRenderer.setHorizontalAlignment(JLabel.CENTER);
                tblStudentList.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(6).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(7).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(8).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(0).setWidth(0);
                tblStudentList.getColumnModel().getColumn(0).setMinWidth(0);
                tblStudentList.getColumnModel().getColumn(0).setMaxWidth(0);
                tblStudentList.getColumnModel().getColumn(1).setPreferredWidth(250);
                tblStudentList.getColumnModel().getColumn(2).setPreferredWidth(600);
                tblStudentList.getColumnModel().getColumn(3).setPreferredWidth(170);
                tblStudentList.getColumnModel().getColumn(4).setPreferredWidth(200);
                tblStudentList.getColumnModel().getColumn(5).setPreferredWidth(170);
                tblStudentList.getColumnModel().getColumn(6).setPreferredWidth(700);
                tblStudentList.getColumnModel().getColumn(7).setPreferredWidth(200);
                tblStudentList.getColumnModel().getColumn(8).setPreferredWidth(400);
                tblStudentList.setSelectionBackground(Color.ORANGE);
            } else if (cmbFilter.getSelectedItem().equals("Grade Level")) {
                cst = con.prepareCall("{call sp_GetStudentByGradeLevel(?)}");
                cst.setString("param_GradeLevel", "%" + txtSearch.getText() + "%");
                rs = cst.executeQuery();
                if (rs.next()) {
                    rs.last();
                    rows = rs.getRow();
                    rs.beforeFirst();
                }
                String[][] data = new String[rows][9];
                while (rs.next()) {
                    data[rowIndex][0] = rs.getString(1);
                    data[rowIndex][1] = rs.getString(2);
                    data[rowIndex][2] = rs.getString(3);
                    data[rowIndex][3] = rs.getString(4);
                    data[rowIndex][4] = rs.getString(5);
                    data[rowIndex][5] = rs.getString(6);
                    data[rowIndex][6] = rs.getString(7);
                    data[rowIndex][7] = rs.getString(8);
                    data[rowIndex][8] = rs.getString(9);
                    rowIndex++;
                }
                String[] cols = {"ID", "RFID", "FULL NAME", "GENDER", "DATE OF BIRTH", "AGE", "ADDRESS", "GRADE LEVEL", "CONTACT NUMBER"};
                DefaultTableModel model = new DefaultTableModel(data, cols);
                tblStudentList.setRowHeight(25);
                tblStudentList.setModel(model);
                DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
                centerRenderer.setHorizontalAlignment(JLabel.CENTER);
                tblStudentList.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(6).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(7).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(8).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(0).setWidth(0);
                tblStudentList.getColumnModel().getColumn(0).setMinWidth(0);
                tblStudentList.getColumnModel().getColumn(0).setMaxWidth(0);
                tblStudentList.getColumnModel().getColumn(1).setPreferredWidth(250);
                tblStudentList.getColumnModel().getColumn(2).setPreferredWidth(600);
                tblStudentList.getColumnModel().getColumn(3).setPreferredWidth(170);
                tblStudentList.getColumnModel().getColumn(4).setPreferredWidth(200);
                tblStudentList.getColumnModel().getColumn(5).setPreferredWidth(170);
                tblStudentList.getColumnModel().getColumn(6).setPreferredWidth(700);
                tblStudentList.getColumnModel().getColumn(7).setPreferredWidth(200);
                tblStudentList.getColumnModel().getColumn(8).setPreferredWidth(400);
                tblStudentList.setSelectionBackground(Color.ORANGE);
            } else if (cmbFilter.getSelectedItem().equals("Contact Number")) {
                cst = con.prepareCall("{call sp_GetStudentByContactNumber(?)}");
                cst.setString("param_ContactNumber", "%" + txtSearch.getText() + "%");
                rs = cst.executeQuery();
                if (rs.next()) {
                    rs.last();
                    rows = rs.getRow();
                    rs.beforeFirst();
                }
                String[][] data = new String[rows][9];
                while (rs.next()) {
                    data[rowIndex][0] = rs.getString(1);
                    data[rowIndex][1] = rs.getString(2);
                    data[rowIndex][2] = rs.getString(3);
                    data[rowIndex][3] = rs.getString(4);
                    data[rowIndex][4] = rs.getString(5);
                    data[rowIndex][5] = rs.getString(6);
                    data[rowIndex][6] = rs.getString(7);
                    data[rowIndex][7] = rs.getString(8);
                    data[rowIndex][8] = rs.getString(9);
                    rowIndex++;
                }
                String[] cols = {"ID", "RFID", "FULL NAME", "GENDER", "DATE OF BIRTH", "AGE", "ADDRESS", "GRADE LEVEL", "CONTACT NUMBER"};
                DefaultTableModel model = new DefaultTableModel(data, cols);
                tblStudentList.setRowHeight(25);
                tblStudentList.setModel(model);
                DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
                centerRenderer.setHorizontalAlignment(JLabel.CENTER);
                tblStudentList.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(6).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(7).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(8).setCellRenderer(centerRenderer);
                tblStudentList.getColumnModel().getColumn(0).setWidth(0);
                tblStudentList.getColumnModel().getColumn(0).setMinWidth(0);
                tblStudentList.getColumnModel().getColumn(0).setMaxWidth(0);
                tblStudentList.getColumnModel().getColumn(1).setPreferredWidth(250);
                tblStudentList.getColumnModel().getColumn(2).setPreferredWidth(600);
                tblStudentList.getColumnModel().getColumn(3).setPreferredWidth(170);
                tblStudentList.getColumnModel().getColumn(4).setPreferredWidth(200);
                tblStudentList.getColumnModel().getColumn(5).setPreferredWidth(170);
                tblStudentList.getColumnModel().getColumn(6).setPreferredWidth(700);
                tblStudentList.getColumnModel().getColumn(7).setPreferredWidth(200);
                tblStudentList.getColumnModel().getColumn(8).setPreferredWidth(400);
                tblStudentList.setSelectionBackground(Color.ORANGE);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex);
            ex.printStackTrace();
        }
        this.lblTotalEntry.setText("TOTAL ENTRY: " + tblStudentList.getRowCount());
    }
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        this.hide();
        JFrame_Main nextFrame = new JFrame_Main();
        nextFrame.show();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnAddNewStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewStudentActionPerformed
        this.hide();
        JFrame_StudentAdd nextFrame = new JFrame_StudentAdd();
        nextFrame.show();
    }//GEN-LAST:event_btnAddNewStudentActionPerformed

    private void cmbFilterItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbFilterItemStateChanged
        txtSearch.requestFocus();
    }//GEN-LAST:event_cmbFilterItemStateChanged

    private void tblStudentListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblStudentListMouseClicked
        retrieveStudentInformations();
    }//GEN-LAST:event_tblStudentListMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrame_StudentList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrame_StudentList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrame_StudentList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrame_StudentList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrame_StudentList().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JPanel JPANEL1;
    private javax.swing.JButton btnAddNewStudent;
    private javax.swing.JButton btnBack;
    private javax.swing.JComboBox<String> cmbFilter;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblTotalEntry;
    private javax.swing.JTable tblStudentList;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

}
