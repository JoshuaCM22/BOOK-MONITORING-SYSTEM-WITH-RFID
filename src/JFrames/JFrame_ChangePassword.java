/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package JFrames;

import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;
import Connection.DatabaseConnection;
import static JFrames.Objects.con;
import static JFrames.Objects.pst;
import static JFrames.Objects.rs;

/**
 *
 * @author Joshua C. Magoliman
 */
public class JFrame_ChangePassword extends javax.swing.JFrame {
  
    /**
     * Creates new form JFrame_ChangePassword
     */
    public static String usernameGetter, passwordGetter;
    public JFrame_ChangePassword() {
        initComponents();
        DatabaseConnection dbc = DatabaseConnection.getDatabaseConnection();
        con = dbc.getConnection();
        setIcon();
        reset();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnConfirm = new javax.swing.JButton();
        lblCurrentPassword = new javax.swing.JLabel();
        txtCurrentPassword = new javax.swing.JPasswordField();
        chkShowPassword1 = new javax.swing.JCheckBox();
        txtNewPassword = new javax.swing.JPasswordField();
        lblNewPassword = new javax.swing.JLabel();
        txtConfirmNewPassword = new javax.swing.JPasswordField();
        lblConfirmNewPassword = new javax.swing.JLabel();
        chkShowPassword2 = new javax.swing.JCheckBox();
        btnBack = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CHANGE PASSWORD");
        setResizable(false);

        jPanel1.setBackground(java.awt.Color.white);
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        btnConfirm.setBackground(new java.awt.Color(0, 153, 0));
        btnConfirm.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnConfirm.setForeground(java.awt.Color.white);
        btnConfirm.setText("CONFIRM");
        btnConfirm.setBorderPainted(false);
        btnConfirm.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnConfirm.setFocusPainted(false);
        btnConfirm.setFocusable(false);
        btnConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmActionPerformed(evt);
            }
        });

        lblCurrentPassword.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        lblCurrentPassword.setText("Current Password");

        txtCurrentPassword.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        txtCurrentPassword.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtCurrentPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCurrentPasswordKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCurrentPasswordKeyTyped(evt);
            }
        });

        chkShowPassword1.setBackground(java.awt.Color.white);
        chkShowPassword1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        chkShowPassword1.setText("Show Password");
        chkShowPassword1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        chkShowPassword1.setFocusable(false);
        chkShowPassword1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkShowPassword1ActionPerformed(evt);
            }
        });

        txtNewPassword.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        txtNewPassword.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtNewPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNewPasswordKeyTyped(evt);
            }
        });

        lblNewPassword.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        lblNewPassword.setText("New Password");

        txtConfirmNewPassword.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        txtConfirmNewPassword.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtConfirmNewPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtConfirmNewPasswordKeyTyped(evt);
            }
        });

        lblConfirmNewPassword.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        lblConfirmNewPassword.setText("Confirm New Password");

        chkShowPassword2.setBackground(java.awt.Color.white);
        chkShowPassword2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        chkShowPassword2.setText("Show Password");
        chkShowPassword2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        chkShowPassword2.setFocusable(false);
        chkShowPassword2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkShowPassword2ActionPerformed(evt);
            }
        });

        btnBack.setBackground(new java.awt.Color(0, 153, 0));
        btnBack.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnBack.setForeground(java.awt.Color.white);
        btnBack.setText("BACK");
        btnBack.setBorderPainted(false);
        btnBack.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBack.setFocusPainted(false);
        btnBack.setFocusable(false);
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblCurrentPassword)
                            .addComponent(lblNewPassword)
                            .addComponent(lblConfirmNewPassword))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtNewPassword)
                            .addComponent(chkShowPassword1)
                            .addComponent(txtCurrentPassword)
                            .addComponent(txtConfirmNewPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chkShowPassword2)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(btnConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(40, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(260, Short.MAX_VALUE)
                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(62, 62, 62)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(87, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCurrentPassword)
                    .addComponent(txtCurrentPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chkShowPassword1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNewPassword)
                    .addComponent(txtNewPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblConfirmNewPassword)
                    .addComponent(txtConfirmNewPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(chkShowPassword2)
                .addGap(82, 82, 82)
                .addComponent(btnConfirm)
                .addGap(41, 41, 41))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(361, Short.MAX_VALUE)
                    .addComponent(btnBack)
                    .addGap(38, 38, 38)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
   private void setIcon() {
    setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("ICON.png")));
    }
    private void reset() {
        txtCurrentPassword.setText("");
        txtNewPassword.setText("");
        txtConfirmNewPassword.setText("");
        chkShowPassword1.setSelected(false);
        chkShowPassword2.setSelected(false);
    }
    private void chkShowPassword2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkShowPassword2ActionPerformed
   if (chkShowPassword2.isSelected()) {
            txtNewPassword.setEchoChar((char) 0);
            txtConfirmNewPassword.setEchoChar((char) 0);
        } else {
            txtNewPassword.setEchoChar('*');
            txtConfirmNewPassword.setEchoChar('*');
        }
        this.lblCurrentPassword.requestFocus();
    }//GEN-LAST:event_chkShowPassword2ActionPerformed

    private void txtConfirmNewPasswordKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtConfirmNewPasswordKeyTyped
     char c = evt.getKeyChar();
        if (!(Character.isAlphabetic(c) || Character.isDigit(c) || c == KeyEvent.VK_DELETE)) {
            evt.consume();
        }
        if (txtConfirmNewPassword.getText().length() >= 12) {
            evt.consume();
        }
    }//GEN-LAST:event_txtConfirmNewPasswordKeyTyped

    private void txtNewPasswordKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNewPasswordKeyTyped
     char c = evt.getKeyChar();
        if (!(Character.isAlphabetic(c) || Character.isDigit(c) || c == KeyEvent.VK_DELETE)) {
            evt.consume();
        }
        if (txtNewPassword.getText().length() >= 12) {
            evt.consume();
        }
    }//GEN-LAST:event_txtNewPasswordKeyTyped

    private void chkShowPassword1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkShowPassword1ActionPerformed
      if (chkShowPassword1.isSelected()) {
          txtCurrentPassword.setEchoChar((char) 0);
        } else {
            txtCurrentPassword.setEchoChar('*');
        }
        this.lblCurrentPassword.requestFocus();
    }//GEN-LAST:event_chkShowPassword1ActionPerformed

    private void txtCurrentPasswordKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCurrentPasswordKeyTyped
   char c = evt.getKeyChar();
        if (!(Character.isAlphabetic(c) || Character.isDigit(c) || c == KeyEvent.VK_DELETE)) {
            evt.consume();
        }
        if (txtCurrentPassword.getText().length() >= 12) {
            evt.consume();
        }
    }//GEN-LAST:event_txtCurrentPasswordKeyTyped

    private void txtCurrentPasswordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCurrentPasswordKeyReleased
    if (!txtCurrentPassword.getText().equals("")) {
            btnBack.setText("CANCEL");
        } else {
            btnBack.setText("BACK");
        }
    }//GEN-LAST:event_txtCurrentPasswordKeyReleased

    private void btnConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmActionPerformed
    validation();
    }//GEN-LAST:event_btnConfirmActionPerformed

    private void validation() {
        if (txtCurrentPassword.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "No Current Password Found!", "ATTENTION", JOptionPane.ERROR_MESSAGE);
            txtCurrentPassword.requestFocus();
        } else if (txtNewPassword.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "No New Password Found!", "ATTENTION", JOptionPane.ERROR_MESSAGE);
            txtNewPassword.requestFocus();
        } else if (txtConfirmNewPassword.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "No Confirm New Password Found!", "ATTENTION", JOptionPane.ERROR_MESSAGE);
            txtConfirmNewPassword.requestFocus();
        } else {
            try {
                pst = con.prepareStatement("SELECT * FROM tbl_users WHERE username = ?");
                pst.setString(1, usernameGetter);
                rs = pst.executeQuery();
                if (rs.next()) {
                    String plainPassword = txtCurrentPassword.getText();
                    String hashedPassword = rs.getString("password");
                    if (BCrypt.checkpw(plainPassword, hashedPassword)) {
                        comparing();
                    } else {
                        JOptionPane.showMessageDialog(this, "Your Current Password is incorrect!", "ATTENTION", JOptionPane.ERROR_MESSAGE);
                        txtCurrentPassword.setText("");
                        txtCurrentPassword.requestFocus();
                    }
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex);
                ex.printStackTrace();
            }
        }
    }

    private void comparing() {
        if (!txtNewPassword.getText().equals(txtConfirmNewPassword.getText())) {
            JOptionPane.showMessageDialog(this, "Your New Password and Confirm New Password are not the same!", "ATTENTION", JOptionPane.ERROR_MESSAGE);
        } else if (!txtConfirmNewPassword.getText().equals(txtNewPassword.getText())) {
            JOptionPane.showMessageDialog(this, "Your New Password and Confirm New Password are not the same!", "ATTENTION", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                pst = con.prepareStatement("SELECT * FROM tbl_users WHERE username = ?");
                pst.setString(1, usernameGetter);
                rs = pst.executeQuery();
                if (rs.next()) {
                    String plainPassword = txtConfirmNewPassword.getText();
                    String hashedPassword = rs.getString("password");
                    if (BCrypt.checkpw(plainPassword, hashedPassword)) {
                        JOptionPane.showMessageDialog(this, "Your New Password and Confirm New Password is currently used, please try another password!", "ATTENTION", JOptionPane.ERROR_MESSAGE);
                    } else {
                        updatingPassword();
                    }
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex);
                ex.printStackTrace();
            }
        }
    }
    private void updatingPassword() {
        try {
            String hashedPassword = BCrypt.hashpw(txtConfirmNewPassword.getText(), BCrypt.gensalt(12));
            pst = con.prepareStatement("UPDATE tbl_users SET password = ? WHERE username = ?");
            pst.setString(1, hashedPassword);
            pst.setString(2, usernameGetter);
            if (pst.executeUpdate() == 1) {
                JOptionPane.showMessageDialog(this, "Successfully changed!", "ATTENTION", JOptionPane.INFORMATION_MESSAGE);
                passwordGetter = txtNewPassword.getText();
                reset();
                this.hide();
                JFrame_Main nextFrame = new JFrame_Main();
                nextFrame.show();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex);
            ex.printStackTrace();
        }
    }
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        if (btnBack.getText().equals("BACK")) {
            this.hide();
            new JFrame_Main().setVisible(true);
        } else {
            int P = JOptionPane.showConfirmDialog(null, " Are you sure want to cancel?", "ATTENTION", JOptionPane.YES_NO_OPTION);
            if (P == JOptionPane.YES_OPTION) //(P==0) //YES FOR 0 NO FOR 1
            {
                this.hide();
                new JFrame_Main().setVisible(true);
            }
        }
    }//GEN-LAST:event_btnBackActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrame_ChangePassword.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrame_ChangePassword.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrame_ChangePassword.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrame_ChangePassword.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrame_ChangePassword().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnConfirm;
    private javax.swing.JCheckBox chkShowPassword1;
    private javax.swing.JCheckBox chkShowPassword2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblConfirmNewPassword;
    private javax.swing.JLabel lblCurrentPassword;
    private javax.swing.JLabel lblNewPassword;
    private javax.swing.JPasswordField txtConfirmNewPassword;
    private javax.swing.JPasswordField txtCurrentPassword;
    private javax.swing.JPasswordField txtNewPassword;
    // End of variables declaration//GEN-END:variables
}
